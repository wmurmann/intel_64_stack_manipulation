     1                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
     2                                  ;   TTTTTTTTTTTTTTT               A               PPPPPP         Titan Assembly Project, CSUF
     3                                  ;          T                     A A              P    PP        Titan Assembly Project, CSUF
     4                                  ;          T                    A   A             P     PP       Titan Assembly Project, CSUF
     5                                  ;          T                   A     A            P      PP      Titan Assembly Project, CSUF
     6                                  ;          T                  A       A           P     PP       Titan Assembly Project, CSUF
     7                                  ;          T                 A         A          P    PP        Titan Assembly Project, CSUF
     8                                  ;          T                AAAAAAAAAAAAA         PPPPPP         Titan Assembly Project, CSUF
     9                                  ;          T               A             A        P              Titan Assembly Project, CSUF
    10                                  ;          T              A               A       P              Titan Assembly Project, CSUF
    11                                  ;          T             A                 A      P              Titan Assembly Project, CSUF
    12                                  ;          T            A                   A     P              Titan Assembly Project, CSUF
    13                                  ;
    14                                  ;Author information
    15                                  ;  Author name: Floyd Holliday
    16                                  ;  Author email: holliday@fullerton.edu
    17                                  ;Course information
    18                                  ;  Course number: CPSC240
    19                                  ;  Assignment number: 00
    20                                  ;  Due date: 9999-Dec-31
    21                                  ;  Date of last modification: 2014-Jul-09
    22                                  ;Project information
    23                                  ;  Project title: X86 Assembly Debugger
    24                                  ;  Purpose: Show contents of registers, stack, and arrays.  This is a tool used by assembly programmers during the development phase.
    25                                  ;  Status: In continuous maintenance
    26                                  ;  Project files: debug.inc, debug.asm
    27                                  ;  Modules (subprograms): showregisters, dumpstack, showfpusubprogram, showxmmregisters, showymmregisters
    28                                  ;  Those five subprograms are contained within this debug.asm file.
    29                                  ;Translator information
    30                                  ;  Linux: nasm -f elf64 -l debug.lis -o debug.o debug.asm
    31                                  ;References and credits
    32                                  ;  Dr. Paul Carter: www.drpaulcarter.com
    33                                  ;Format information
    34                                  ;  Page width: 172 columns
    35                                  ;  Begin comments: 61
    36                                  ;  Optimal print specification: Landscape orientation, 7 points, monospace, 8Â½x11 paper
    37                                  ;Restrictions
    38                                  ;  This software is for use by persons enrolled in CPSC240.  All other use is unauthorized.
    39                                  ;Information for users  
    40                                  ;  Make this Debug tool available for your own software.  First assemble this file.  Place the include statement |%include "debug.inc"| excluding the vertical bars in your
    41                                  ;  source code at the beginning.  Typically this include directive is the first statement other than comments in a program.
    42                                  ;Future enhancements pending
    43                                  ;  Add the save and restore feature to modules showregistersubprogram, showfpusubprogram, showxmmsubprogram
    44                                  ;  Localize all identifiers to their own subprogram in order that no identifier conflict with another identifier in this file.
    45                                  
    46                                  ;==========================================================================================================================================================================
    47                                  ;===== General facts used in Debug ========================================================================================================================================
    48                                  ;==========================================================================================================================================================================
    49                                  ;CCC-64 sequence of parameters (left to right):
    50                                  ;  1st  rdi
    51                                  ;  2nd  rsi
    52                                  ;  3nd  rdx
    53                                  ;  4rd  rcx
    54                                  ;  5th  r8
    55                                  ;  6th  r9
    56                                  ;  remainder on stack right to left
    57                                  
    58                                  ;Regarding which format specifier to use: the following appear to hold:
    59                                  ; "%x" designates 32-bit hex output with leading zeros suppressed.
    60                                  ; "%lx" designates 64-bit hex output
    61                                  ; "%llx" designates 128-bit hex output
    62                                  ; "%lllx" designates 256-bit hex output
    63                                  ; "%llld" designates 256-bit decimal output
    64                                  ; "%8x" designates 32-bit hex output in 8 columns
    65                                  ; "%016lx" designates 64-bit hex output in 16 columns with leading zeros displayed.
    66                                  ; "%lu" designates 64-bit unsigned integer.
    67                                  
    68                                  ;==========================================================================================================================================================================
    69                                  ;===== Begin subprogram showregisters =====================================================================================================================================
    70                                  ;===== Begin subprogram showregisters =====================================================================================================================================
    71                                  ;===== Begin subprogram showregisters =====================================================================================================================================
    72                                  ;==========================================================================================================================================================================
    73                                  ;Module information
    74                                  ;  This module's call name: showregisterssubprogram
    75                                  ;  Language: X86-64
    76                                  ;  Syntax: Intel
    77                                  ;  Date last modified: 2014-July-14
    78                                  ;  Purpose: This module will show the contents of all integer registers including the flags register.
    79                                  ;  Status: The present source code is in production.
    80                                  ;  Future enhancements: Backup the SSE registers.  Find how to detect the presence of AVE and backup AVE only when present.
    81                                  
    82                                  ;X86 rflags register:
    83                                  ;Bit# Mnemonic Name
    84                                  ;  0     CF    Carry flag
    85                                  ;  1           unused
    86                                  ;  2     PF    Parity flag
    87                                  ;  3           unused
    88                                  ;  4     AF    Auxiliary Carry flag
    89                                  ;  5           unused
    90                                  ;  6     ZF    Zero flag
    91                                  ;  7     SF    Sign flag
    92                                  ;  8     TF    Trap flag
    93                                  ;  9     IF    Interrupt flag
    94                                  ; 10     DF    Direction flag
    95                                  ; 11     OF    Overflow flag
    96                                  
    97                                  ;===== Expected format of the output ======================================================================================================================================
    98                                  ;Register Dump # 132
    99                                  ;rax = 0000000000000003 rbx = 0000000000000000 rcx = 0000000000000001 rdx = 00007f59b444aab0
   100                                  ;rsi = 0000000000000003 rdi = 0000000000602ad0 rbp = 00007fff7d9a6960 rsp = 00007fff7d9a6900
   101                                  ;r8  = 00007f59b496e01b r9  = 0000000000000001 r10 = 0000000000000000 r11 = 0000000000000246
   102                                  ;r12 = 0000000000000003 r13 = 00007fff7d9a6a40 r14 = 0000000000000019 r15 = 0000000000000000
   103                                  ;rip = 00000000004008bf
   104                                  ;rflags = 0000000000000246 of = 0 sf = 0 zf = 1 af = 0 pf = 1 cf = 0
   105                                  
   106                                  
   107                                  ;===== Define constants ===================================================================================================================================================
   108                                  ;Set constants via assembler directives
   109                                  %define qwordsize 8                     ;8 bytes
   110                                  %define cmask 00000001h                 ;Carry mask
   111                                  %define pmask 00000004h                 ;Parity mask
   112                                  %define amask 00000010h                 ;Auxiliary mask
   113                                  %define zmask 00000040h                 ;Zero mask
   114                                  %define smask 00000080h                 ;Sign mask
   115                                  %define dmask 00000400h                 ;Not used
   116                                  %define omask 00000800h                 ;Overflow mask
   117                                  
   118                                  
   119                                  extern printf                                               ;printf will be available to the linker in a binary format
   120                                  
   121                                  global showregisterssubprogram                              ;Make this subprogram callable from outside this file
   122                                  
   123                                  segment .data                                               ;This segment declares initialized data
   124                                  
   125 00000000 526567697374657220-     showregisterssubprogram.registerformat1 db "Register Dump # %ld", 10,
   126 00000009 44756D70202320256C-
   127 00000012 640A               
   128 00000014 726178203D20253031-                                             db "rax = %016lx rbx = %016lx rcx = %016lx rdx = %016lx", 10,
   129 0000001D 366C7820726278203D-
   130 00000026 20253031366C782072-
   131 0000002F 6378203D2025303136-
   132 00000038 6C7820726478203D20-
   133 00000041 253031366C780A     
   134 00000048 727369203D20253031-                                             db "rsi = %016lx rdi = %016lx rbp = %016lx rsp = %016lx", 10, 0
   135 00000051 366C7820726469203D-
   136 0000005A 20253031366C782072-
   137 00000063 6270203D2025303136-
   138 0000006C 6C7820727370203D20-
   139 00000075 253031366C780A00   
   140                                  
   141 0000007D 723820203D20253031-     showregisterssubprogram.registerformat2 db "r8  = %016lx r9  = %016lx r10 = %016lx r11 = %016lx", 10,
   142 00000086 366C7820723920203D-
   143 0000008F 20253031366C782072-
   144 00000098 3130203D2025303136-
   145 000000A1 6C7820723131203D20-
   146 000000AA 253031366C780A     
   147 000000B1 723132203D20253031-                                             db "r12 = %016lx r13 = %016lx r14 = %016lx r15 = %016lx", 10, 0
   148 000000BA 366C7820723133203D-
   149 000000C3 20253031366C782072-
   150 000000CC 3134203D2025303136-
   151 000000D5 6C7820723135203D20-
   152 000000DE 253031366C780A00   
   153                                  
   154 000000E6 726970203D20253031-     showregisterssubprogram.registerformat3 db "rip = %016lx", 10, "rflags = %016lx ",
   155 000000EF 366C780A72666C6167-
   156 000000F8 73203D20253031366C-
   157 00000101 7820               
   158 00000103 6F66203D2025317820-                                             db "of = %1x sf = %1x zf = %1x af = %1x pf = %1x cf = %1x", 10, 0
   159 0000010C 7366203D2025317820-
   160 00000115 7A66203D2025317820-
   161 0000011E 6166203D2025317820-
   162 00000127 7066203D2025317820-
   163 00000130 6366203D202531780A-
   164 00000139 00                 
   165                                  
   166 0000013A 257300                  showregisterssubprogram.stringformat db "%s", 0
   167                                  
   168 0000013D 546865207873617665-     showregisterssubprogram.notsupportedmessage db "The xsave instruction is not supported in this microprocessor.", 10, 0
   169 00000146 20696E737472756374-
   170 0000014F 696F6E206973206E6F-
   171 00000158 7420737570706F7274-
   172 00000161 656420696E20746869-
   173 0000016A 73206D6963726F7072-
   174 00000173 6F636573736F722E0A-
   175 0000017C 00                 
   176                                  
   177                                  segment .bss                                                ;Declare uninitialized arrays in this segment
   178                                  
   179                                  align 64                                                    ;The next data object must begin on a 64-byte boundary.
   180 00000000 <res 00000340>          showregisterssubprogram.backuparea resb 832                 ;Declare an array of sufficient size to hold all data from state components 0, 1, and 2.
   181                                  
   182                                  segment .text                                               ;Executable instruction are in this segment
   183                                  
   184                                  showregisterssubprogram:                                    ;Execution begins here
   185                                  
   186                                  ;=========== Back up all the GPRs whether used in this program or not =====================================================================================================
   187                                  
   188 00000000 55                      push       rbp                                              ;Save a copy of the stack base pointer
   189 00000001 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
   190 00000004 50                      push       rax                                              ;This is a special case: typically rax is not backed up.
   191 00000005 53                      push       rbx                                              ;Back up rbx
   192 00000006 51                      push       rcx                                              ;Back up rcx
   193 00000007 52                      push       rdx                                              ;Back up rdx
   194 00000008 56                      push       rsi                                              ;Back up rsi
   195 00000009 57                      push       rdi                                              ;Back up rdi
   196 0000000A 4150                    push       r8                                               ;Back up r8
   197 0000000C 4151                    push       r9                                               ;Back up r9
   198 0000000E 4152                    push       r10                                              ;Back up r10
   199 00000010 4153                    push       r11                                              ;Back up r11
   200 00000012 4154                    push       r12                                              ;Back up r12
   201 00000014 4155                    push       r13                                              ;Back up r13
   202 00000016 4156                    push       r14                                              ;Back up r14
   203 00000018 4157                    push       r15                                              ;Back up r15
   204 0000001A 9C                      pushf                                                       ;Back up rflags
   205                                  
   206                                  
   207                                  ;==========================================================================================================================================================================
   208                                  ;===== Begin State Component Backup =======================================================================================================================================
   209                                  ;==========================================================================================================================================================================
   210                                  
   211                                  ;=========== Before proceeding verify that this computer supports xsave and xrstor ========================================================================================
   212                                  ;Bit #26 of rcx, written rcx[26], must be 1; otherwise xsave and xrstor are not supported by this computer.
   213                                  ;Preconditions: rax holds 1.
   214 0000001B B801000000              mov        rax, 1
   215                                  
   216                                  ;Execute the cpuid instruction
   217 00000020 0FA2                    cpuid
   218                                  
   219                                  ;Postconditions: If rcx[26]==1 then xsave is supported.  If rcx[26]==0 then xsave is not supported.
   220                                  
   221                                  ;=========== Extract bit #26 and test it ==================================================================================================================================
   222                                  
   223 00000022 4881E100000004          and        rcx, 0x0000000004000000                          ;The mask 0x0000000004000000 has a 1 in position #26.  Now rcx is either all zeros or
   224                                                                                              ;has a single 1 in position #26 and zeros everywhere else.
   225 00000029 4883F900                cmp        rcx, 0                                           ;Is (rcx == 0)?
   226 0000002D 742A                    je         .xsavenotsupported                               ;Skip the section that backs up state component data.
   227                                  
   228                                  ;========== Call the function to obtain the bitmap of state components ====================================================================================================
   229                                  
   230                                  ;Preconditions
   231 0000002F B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
   232 00000034 B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
   233                                  
   234                                  ;Call the function
   235 00000039 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
   236                                  
   237                                  ;Postconditions (There are 2 of these):
   238                                  
   239                                  ;1.  edx:eax is a bit map of state components managed by xsave.  At the time this program was written (2014 June) there were exactly 3 state components.  Therefore, bits
   240                                  ;    numbered 2, 1, and 0 are important for current cpu technology.
   241                                  ;2.  ecx holds the number of bytes required to store all the data of enabled state components. [Post condition 2 is not used in this program.]
   242                                  ;This program assumes that under current technology (year 2014) there are at most three state components having a maximum combined data storage requirement of 832 bytes.
   243                                  ;Therefore, the value in ecx will be less than or equal to 832.
   244                                  
   245                                  ;Precaution: As an insurance against a future time when there will be more than 3 state components in a processor of the X86 family the state component bitmap is masked to
   246                                  ;allow only 3 state components maximum.
   247                                  
   248 0000003B 41BF07000000            mov        r15, 7                                           ;7 equals three 1 bits.
   249 00000041 4C21F8                  and        rax, r15                                         ;Bits 63-3 become zeros.
   250 00000044 41BF00000000            mov        r15, 0                                           ;0 equals 64 binary zeros.
   251 0000004A 4C21FA                  and        rdx, r15                                         ;Zero out rdx.
   252                                  
   253                                  ;========== Save all the data of all three components except GPRs =========================================================================================================
   254                                  
   255                                  ;The instruction xsave will save those state components with on bits in the bitmap.  At this point edx:eax continues to hold the state component bitmap.
   256                                  
   257                                  ;Precondition: edx:eax holds the state component bit map.  This condition has been met by the two pops preceding this statement.
   258 0000004D 0FAE2425[00000000]      xsave      [.backuparea]                                    ;All the data of state components managed by xsave have been written to backuparea.
   259                                  
   260 00000055 6AFF                    push qword -1                                               ;Set a flag (-1 = true) to indicate that state component data were backed up.
   261 00000057 EB20                    jmp        .startapplication                                ;Jump past the message stating "The xsav instruction is not supported"
   262                                  
   263                                  ;========== Show message xsave is not supported on this platform ==========================================================================================================
   264                                  .xsavenotsupported:
   265                                  
   266 00000059 B800000000              mov        rax, 0                                           ;The zero value indicates that no floating values will be outputted by printf.
   267 0000005E 48BF-                   mov        rdi, .stringformat                               ;"%s"
   268 00000060 [3A01000000000000] 
   269 00000068 48BE-                   mov        rsi, .notsupportedmessage                        ;"The xsave instruction is not supported in this microprocessor.
   270 0000006A [3D01000000000000] 
   271 00000072 E8(00000000)            call       printf
   272                                  
   273 00000077 6A00                    push qword 0                                                ;Set a flag (0 = false) to indicate that state component data were not backed up.
   274                                  
   275                                  ;==========================================================================================================================================================================
   276                                  ;===== End of State Component Backup ======================================================================================================================================
   277                                  ;==========================================================================================================================================================================
   278                                  
   279                                  ;==========================================================================================================================================================================
   280                                  .startapplication: ;===== Begin the application here: Show the General Purpose Registers ==================================================================================
   281                                  ;==========================================================================================================================================================================
   282                                  
   283                                  ;===== State of the integer stack at this time ============================================================================================================================
   284                                  
   285                                  ;              |---------------------------|
   286                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   287                                  ;              |---------------------------|
   288                                  ;     rsp+18*8 | arbitrary number from user|
   289                                  ;              |---------------------------|
   290                                  ;     rsp+17*8 | return address            |
   291                                  ;              |---------------------------|
   292                                  ;     rsp+16*8 | rbp                       |
   293                                  ;              |---------------------------|
   294                                  ;     rsp+15*8 | rax                       |
   295                                  ;              |---------------------------|
   296                                  ;     rsp+14*8 | rbx                       |
   297                                  ;              |---------------------------|
   298                                  ;     rsp+13*8 | rcx                       |
   299                                  ;              |---------------------------|
   300                                  ;     rsp+12*8 | rdx                       |
   301                                  ;              |---------------------------|
   302                                  ;     rsp+11*8 | rsi                       |
   303                                  ;              |---------------------------|
   304                                  ;     rsp+10*8 | rdi                       |
   305                                  ;              |---------------------------|
   306                                  ;     rsp+9*8  | r8                        |
   307                                  ;              |---------------------------|
   308                                  ;     rsp+8*8  | r9                        |
   309                                  ;              |---------------------------|
   310                                  ;     rsp+7*8  | r10                       |
   311                                  ;              |---------------------------|
   312                                  ;     rsp+6*8  | r11                       |
   313                                  ;              |---------------------------|
   314                                  ;     rsp+5*8  | r12                       |
   315                                  ;              |---------------------------|
   316                                  ;     rsp+4*8  | r13                       |
   317                                  ;              |---------------------------|
   318                                  ;     rsp+3*8  | r14                       |
   319                                  ;              |---------------------------|
   320                                  ;     rsp+2*8  | r15                       |
   321                                  ;              |---------------------------|
   322                                  ;     rsp+1*8  | rflags                    |
   323                                  ;              |---------------------------|
   324                                  ;     rsp      | flag either -1 or 0       |
   325                                  ;              |---------------------------|
   326                                  ;
   327 00000079 4889E0                  mov        rax, rsp                                         ;Copy top of stack to an available registers where it can be modified without damage to the true top of stack.
   328 0000007C 480598000000            add        rax, 152                                         ;152=19*8.  rax holds address of top of stack at the instant before this program showregisters was called.
   329 00000082 50                      push       rax                                              ;The top of stack holds the top of the stack address when showregisters was called.
   330                                  
   331                                  ;===== State of the integer stack at this time ============================================================================================================================
   332                                  
   333                                  ;              |---------------------------|
   334                                  ;     rsp+20*8 | unknown                   |
   335                                  ;              |---------------------------|
   336                                  ;     rsp+19*8 | arbitrary number from user|
   337                                  ;              |---------------------------|
   338                                  ;     rsp+18*8 | return address            |
   339                                  ;              |---------------------------|
   340                                  ;     rsp+17*8 | rbp                       |
   341                                  ;              |---------------------------|
   342                                  ;     rsp+16*8 | rax                       |
   343                                  ;              |---------------------------|
   344                                  ;     rsp+15*8 | rbx                       |
   345                                  ;              |---------------------------|
   346                                  ;     rsp+14*8 | rcx                       |
   347                                  ;              |---------------------------|
   348                                  ;     rsp+13*8 | rdx                       |
   349                                  ;              |---------------------------|
   350                                  ;     rsp+12*8 | rsi                       |
   351                                  ;              |---------------------------|
   352                                  ;     rsp+11*8 | rdi                       |
   353                                  ;              |---------------------------|
   354                                  ;     rsp+10*8 | r8                        |
   355                                  ;              |---------------------------|
   356                                  ;     rsp+9*8  | r9                        |
   357                                  ;              |---------------------------|
   358                                  ;     rsp+8*8  | r10                       |
   359                                  ;              |---------------------------|
   360                                  ;     rsp+7*8  | r11                       |
   361                                  ;              |---------------------------|
   362                                  ;     rsp+6*8  | r12                       |
   363                                  ;              |---------------------------|
   364                                  ;     rsp+5*8  | r13                       |
   365                                  ;              |---------------------------|
   366                                  ;     rsp+4*8  | r14                       |
   367                                  ;              |---------------------------|
   368                                  ;     rsp+3*8  | r15                       |
   369                                  ;              |---------------------------|
   370                                  ;     rsp+2*8  | rflags                    |
   371                                  ;              |---------------------------|
   372                                  ;     rsp+1*8  | flag either -1 or 0       |
   373                                  ;              |---------------------------|
   374                                  ;     rsp      | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   375                                  ;              |---------------------------|
   376                                  
   377 00000083 488B842488000000        mov        rax, [rsp+17*8]                                  ;Copy the original rbp to an available register.
   378 0000008B 50                      push       rax                                              ;Push the original rbp onto the stack.
   379                                  
   380                                  ;===== State of the integer stack at this time ============================================================================================================================
   381                                  
   382                                  ;              |---------------------------|
   383                                  ;     rsp+21*8 | unknown                   |
   384                                  ;              |---------------------------|
   385                                  ;     rsp+20*8 | arbitrary number from user|
   386                                  ;              |---------------------------|
   387                                  ;     rsp+19*8 | return address            |
   388                                  ;              |---------------------------|
   389                                  ;     rsp+18*8 | rbp                       |
   390                                  ;              |---------------------------|
   391                                  ;     rsp+17*8 | rax                       |
   392                                  ;              |---------------------------|
   393                                  ;     rsp+16*8 | rbx                       |
   394                                  ;              |---------------------------|
   395                                  ;     rsp+15*8 | rcx                       |
   396                                  ;              |---------------------------|
   397                                  ;     rsp+14*8 | rdx                       |
   398                                  ;              |---------------------------|
   399                                  ;     rsp+13*8 | rsi                       |
   400                                  ;              |---------------------------|
   401                                  ;     rsp+12*8 | rdi                       |
   402                                  ;              |---------------------------|
   403                                  ;     rsp+11*8 | r8                        |
   404                                  ;              |---------------------------|
   405                                  ;     rsp+10*8 | r9                        |
   406                                  ;              |---------------------------|
   407                                  ;     rsp+9*8  | r10                       |
   408                                  ;              |---------------------------|
   409                                  ;     rsp+8*8  | r11                       |
   410                                  ;              |---------------------------|
   411                                  ;     rsp+7*8  | r12                       |
   412                                  ;              |---------------------------|
   413                                  ;     rsp+6*8  | r13                       |
   414                                  ;              |---------------------------|
   415                                  ;     rsp+5*8  | r14                       |
   416                                  ;              |---------------------------|
   417                                  ;     rsp+4*8  | r15                       |
   418                                  ;              |---------------------------|
   419                                  ;     rsp+3*8  | rflags                    |
   420                                  ;              |---------------------------|
   421                                  ;     rsp+2*8  | flag either -1 or 0       |
   422                                  ;              |---------------------------|
   423                                  ;     rsp+1*8  | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   424                                  ;              |---------------------------|
   425                                  ;     rsp      | original rbp              |                ;"original rbp" means the value in rbp when showregisters was called.
   426                                  ;              |---------------------------|
   427                                  
   428 0000008C 488B442460              mov        rax, [rsp+12*8]                                  ;Copy the original rdi to an available register.
   429 00000091 50                      push       rax                                              ;Push the original rdi onto the stack.
   430                                  
   431                                  ;===== State of the integer stack at this time ============================================================================================================================
   432                                  
   433                                  ;              |---------------------------|
   434                                  ;     rsp+22*8 | unknown                   |
   435                                  ;              |---------------------------|
   436                                  ;     rsp+21*8 | arbitrary number from user|
   437                                  ;              |---------------------------|
   438                                  ;     rsp+20*8 | return address            |
   439                                  ;              |---------------------------|
   440                                  ;     rsp+19*8 | rbp                       |
   441                                  ;              |---------------------------|
   442                                  ;     rsp+18*8 | rax                       |
   443                                  ;              |---------------------------|
   444                                  ;     rsp+17*8 | rbx                       |
   445                                  ;              |---------------------------|
   446                                  ;     rsp+16*8 | rcx                       |
   447                                  ;              |---------------------------|
   448                                  ;     rsp+15*8 | rdx                       |
   449                                  ;              |---------------------------|
   450                                  ;     rsp+14*8 | rsi                       |
   451                                  ;              |---------------------------|
   452                                  ;     rsp+13*8 | rdi                       |
   453                                  ;              |---------------------------|
   454                                  ;     rsp+12*8 | r8                        |
   455                                  ;              |---------------------------|
   456                                  ;     rsp+11*8 | r9                        |
   457                                  ;              |---------------------------|
   458                                  ;     rsp+10*8 | r10                       |
   459                                  ;              |---------------------------|
   460                                  ;     rsp+9*8  | r11                       |
   461                                  ;              |---------------------------|
   462                                  ;     rsp+8*8  | r12                       |
   463                                  ;              |---------------------------|
   464                                  ;     rsp+7*8  | r13                       |
   465                                  ;              |---------------------------|
   466                                  ;     rsp+6*8  | r14                       |
   467                                  ;              |---------------------------|
   468                                  ;     rsp+5*8  | r15                       |
   469                                  ;              |---------------------------|
   470                                  ;     rsp+4*8  | rflags                    |
   471                                  ;              |---------------------------|
   472                                  ;     rsp+3*8  | flag either -1 or 0       |
   473                                  ;              |---------------------------|
   474                                  ;     rsp+2*8  | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   475                                  ;              |---------------------------|
   476                                  ;     rsp+1*8  | original rbp              |                ;"original rbp" means the value in rbp when showregisters was called.
   477                                  ;              |---------------------------|
   478                                  ;     rsp      | original rdi              |                ;"original rdi" means the value in rdi when showregisters was called.
   479                                  ;              |---------------------------|
   480                                  
   481 00000092 488B442470              mov        rax, [rsp+14*8]                                  ;Copy the original rsi to an available register.
   482 00000097 50                      push       rax                                              ;Push the original rsi onto the stack.
   483                                  
   484                                  ;===== State of the integer stack at this time ============================================================================================================================
   485                                  
   486                                  ;              |---------------------------|
   487                                  ;     rsp+23*8 | unknown                   |
   488                                  ;              |---------------------------|
   489                                  ;     rsp+22*8 | arbitrary number from user|
   490                                  ;              |---------------------------|
   491                                  ;     rsp+21*8 | return address            |
   492                                  ;              |---------------------------|
   493                                  ;     rsp+20*8 | rbp                       |
   494                                  ;              |---------------------------|
   495                                  ;     rsp+19*8 | rax                       |
   496                                  ;              |---------------------------|
   497                                  ;     rsp+18*8 | rbx                       |
   498                                  ;              |---------------------------|
   499                                  ;     rsp+17*8 | rcx                       |
   500                                  ;              |---------------------------|
   501                                  ;     rsp+16*8 | rdx                       |
   502                                  ;              |---------------------------|
   503                                  ;     rsp+15*8 | rsi                       |
   504                                  ;              |---------------------------|
   505                                  ;     rsp+14*8 | rdi                       |
   506                                  ;              |---------------------------|
   507                                  ;     rsp+13*8 | r8                        |
   508                                  ;              |---------------------------|
   509                                  ;     rsp+12*8 | r9                        |
   510                                  ;              |---------------------------|
   511                                  ;     rsp+11*8 | r10                       |
   512                                  ;              |---------------------------|
   513                                  ;     rsp+10*8 | r11                       |
   514                                  ;              |---------------------------|
   515                                  ;     rsp+9*8  | r12                       |
   516                                  ;              |---------------------------|
   517                                  ;     rsp+8*8  | r13                       |
   518                                  ;              |---------------------------|
   519                                  ;     rsp+7*8  | r14                       |
   520                                  ;              |---------------------------|
   521                                  ;     rsp+6*8  | r15                       |
   522                                  ;              |---------------------------|
   523                                  ;     rsp+5*8  | rflags                    |
   524                                  ;              |---------------------------|
   525                                  ;     rsp+4*8  | flag either -1 or 0       |
   526                                  ;              |---------------------------|
   527                                  ;     rsp+3*8  | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   528                                  ;              |---------------------------|
   529                                  ;     rsp+2*8  | original rbp              |                ;"original rbp" means the value in rbp when showregisters was called.
   530                                  ;              |---------------------------|
   531                                  ;     rsp+1*8  | original rdi              |                ;"original rdi" means the value in rdi when showregisters was called.
   532                                  ;              |---------------------------|
   533                                  ;     rsp      | original rsi              |                ;"original rsi" means the value in rsi when showregisters was called.
   534                                  ;              |---------------------------|
   535                                  
   536 00000098 4C8B8C2480000000        mov        r9, [rsp+16*8]                                   ;Copy the original rdx to r9, which is the 6th CCC parameter
   537 000000A0 4C8B842488000000        mov        r8, [rsp+17*8]                                   ;Copy the original rcx to r8, which is the 5th CCC parameter
   538 000000A8 488B8C2490000000        mov        rcx, [rsp+18*8]                                  ;Copy the original rbx to rcx, which is the 4th CCC parameter
   539 000000B0 488B942498000000        mov        rdx, [rsp+19*8]
   540 000000B8 488BB424B0000000        mov        rsi, [rsp+22*8]
   541 000000C0 48BF-                   mov        rdi, .registerformat1
   542 000000C2 [0000000000000000] 
   543 000000CA B800000000              mov        rax, 0                                           ;The value in rax signals to printf the number of floating point values to be outputted.
   544 000000CF E8(00000000)            call       printf
   545                                  
   546 000000D4 58                      pop        rax                                              ;Remove and discard original rsi from the stack
   547 000000D5 58                      pop        rax                                              ;Remove and discard original rdi from the stack
   548 000000D6 58                      pop        rax                                              ;Remove and discard original rbp from the stack
   549 000000D7 58                      pop        rax                                              ;Remove and discard original rsp from the stack
   550                                  
   551                                  ;===== State of the integer stack at this time ============================================================================================================================
   552                                  
   553                                  ;              |---------------------------|
   554                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   555                                  ;              |---------------------------|
   556                                  ;     rsp+18*8 | arbitrary number from user|
   557                                  ;              |---------------------------|
   558                                  ;     rsp+17*8 | return address            |
   559                                  ;              |---------------------------|
   560                                  ;     rsp+16*8 | rbp                       |
   561                                  ;              |---------------------------|
   562                                  ;     rsp+15*8 | rax                       |
   563                                  ;              |---------------------------|
   564                                  ;     rsp+14*8 | rbx                       |
   565                                  ;              |---------------------------|
   566                                  ;     rsp+13*8 | rcx                       |
   567                                  ;              |---------------------------|
   568                                  ;     rsp+12*8 | rdx                       |
   569                                  ;              |---------------------------|
   570                                  ;     rsp+11*8 | rsi                       |
   571                                  ;              |---------------------------|
   572                                  ;     rsp+10*8 | rdi                       |
   573                                  ;              |---------------------------|
   574                                  ;     rsp+9*8  | r8                        |
   575                                  ;              |---------------------------|
   576                                  ;     rsp+8*8  | r9                        |
   577                                  ;              |---------------------------|
   578                                  ;     rsp+7*8  | r10                       |
   579                                  ;              |---------------------------|
   580                                  ;     rsp+6*8  | r11                       |
   581                                  ;              |---------------------------|
   582                                  ;     rsp+5*8  | r12                       |
   583                                  ;              |---------------------------|
   584                                  ;     rsp+4*8  | r13                       |
   585                                  ;              |---------------------------|
   586                                  ;     rsp+3*8  | r14                       |
   587                                  ;              |---------------------------|
   588                                  ;     rsp+2*8  | r15                       |
   589                                  ;              |---------------------------|
   590                                  ;     rsp+1*8  | rflags                    |
   591                                  ;              |---------------------------|
   592                                  ;     rsp      | flag either -1 or 0       |
   593                                  ;              |---------------------------|
   594                                  
   595 000000D8 488B442410              mov        rax, [rsp+2*8]                                   ;Copy the original value of r15 to an available register.
   596 000000DD 50                      push       rax                                              ;Push the original value of r15 onto the stack.
   597                                  
   598                                  ;===== State of the integer stack at this time ============================================================================================================================
   599                                  
   600                                  ;              |---------------------------|
   601                                  ;     rsp+20*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   602                                  ;              |---------------------------|
   603                                  ;     rsp+19*8 | arbitrary number from user|
   604                                  ;              |---------------------------|
   605                                  ;     rsp+18*8 | return address            |
   606                                  ;              |---------------------------|
   607                                  ;     rsp+17*8 | rbp                       |
   608                                  ;              |---------------------------|
   609                                  ;     rsp+16*8 | rax                       |
   610                                  ;              |---------------------------|
   611                                  ;     rsp+15*8 | rbx                       |
   612                                  ;              |---------------------------|
   613                                  ;     rsp+14*8 | rcx                       |
   614                                  ;              |---------------------------|
   615                                  ;     rsp+13*8 | rdx                       |
   616                                  ;              |---------------------------|
   617                                  ;     rsp+12*8 | rsi                       |
   618                                  ;              |---------------------------|
   619                                  ;     rsp+11*8 | rdi                       |
   620                                  ;              |---------------------------|
   621                                  ;     rsp+10*8 | r8                        |
   622                                  ;              |---------------------------|
   623                                  ;     rsp+9*8  | r9                        |
   624                                  ;              |---------------------------|
   625                                  ;     rsp+8*8  | r10                       |
   626                                  ;              |---------------------------|
   627                                  ;     rsp+7*8  | r11                       |
   628                                  ;              |---------------------------|
   629                                  ;     rsp+6*8  | r12                       |
   630                                  ;              |---------------------------|
   631                                  ;     rsp+5*8  | r13                       |
   632                                  ;              |---------------------------|
   633                                  ;     rsp+4*8  | r14                       |
   634                                  ;              |---------------------------|
   635                                  ;     rsp+3*8  | r15                       |
   636                                  ;              |---------------------------|
   637                                  ;     rsp+2*8  | rflags                    |
   638                                  ;              |---------------------------|
   639                                  ;     rsp+1*8  | flag either -1 or 0       |
   640                                  ;              |---------------------------|
   641                                  ;     rsp      | original r15              |
   642                                  ;              |---------------------------|
   643                                  
   644 000000DE 488B442420              mov        rax, [rsp+4*8]                                   ;Copy the original value of r14 to an available register.
   645 000000E3 50                      push       rax                                              ;Push the original value of r14 onto the stack.
   646                                  
   647                                  ;===== State of the integer stack at this time ============================================================================================================================
   648                                  
   649                                  ;              |---------------------------|
   650                                  ;     rsp+21*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   651                                  ;              |---------------------------|
   652                                  ;     rsp+20*8 | arbitrary number from user|
   653                                  ;              |---------------------------|
   654                                  ;     rsp+19*8 | return address            |
   655                                  ;              |---------------------------|
   656                                  ;     rsp+18*8 | rbp                       |
   657                                  ;              |---------------------------|
   658                                  ;     rsp+17*8 | rax                       |
   659                                  ;              |---------------------------|
   660                                  ;     rsp+16*8 | rbx                       |
   661                                  ;              |---------------------------|
   662                                  ;     rsp+15*8 | rcx                       |
   663                                  ;              |---------------------------|
   664                                  ;     rsp+14*8 | rdx                       |
   665                                  ;              |---------------------------|
   666                                  ;     rsp+13*8 | rsi                       |
   667                                  ;              |---------------------------|
   668                                  ;     rsp+12*8 | rdi                       |
   669                                  ;              |---------------------------|
   670                                  ;     rsp+11*8 | r8                        |
   671                                  ;              |---------------------------|
   672                                  ;     rsp+10*8 | r9                        |
   673                                  ;              |---------------------------|
   674                                  ;     rsp+9*8  | r10                       |
   675                                  ;              |---------------------------|
   676                                  ;     rsp+8*8  | r11                       |
   677                                  ;              |---------------------------|
   678                                  ;     rsp+7*8  | r12                       |
   679                                  ;              |---------------------------|
   680                                  ;     rsp+6*8  | r13                       |
   681                                  ;              |---------------------------|
   682                                  ;     rsp+5*8  | r14                       |
   683                                  ;              |---------------------------|
   684                                  ;     rsp+4*8  | r15                       |
   685                                  ;              |---------------------------|
   686                                  ;     rsp+3*8  | rflags                    |
   687                                  ;              |---------------------------|
   688                                  ;     rsp+2*8  | flag either -1 or 0       |
   689                                  ;              |---------------------------|
   690                                  ;     rsp+1*8  | original r15              |
   691                                  ;              |---------------------------|
   692                                  ;     rsp      | original r14              |
   693                                  ;              |---------------------------|
   694                                  
   695 000000E4 488B442430              mov        rax, [rsp+6*8]
   696 000000E9 50                      push       rax
   697                                  
   698                                  ;===== State of the integer stack at this time ============================================================================================================================
   699                                  
   700                                  ;              |---------------------------|
   701                                  ;     rsp+22*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   702                                  ;              |---------------------------|
   703                                  ;     rsp+21*8 | arbitrary number from user|
   704                                  ;              |---------------------------|
   705                                  ;     rsp+20*8 | return address            |
   706                                  ;              |---------------------------|
   707                                  ;     rsp+19*8 | rbp                       |
   708                                  ;              |---------------------------|
   709                                  ;     rsp+18*8 | rax                       |
   710                                  ;              |---------------------------|
   711                                  ;     rsp+17*8 | rbx                       |
   712                                  ;              |---------------------------|
   713                                  ;     rsp+16*8 | rcx                       |
   714                                  ;              |---------------------------|
   715                                  ;     rsp+15*8 | rdx                       |
   716                                  ;              |---------------------------|
   717                                  ;     rsp+14*8 | rsi                       |
   718                                  ;              |---------------------------|
   719                                  ;     rsp+13*8 | rdi                       |
   720                                  ;              |---------------------------|
   721                                  ;     rsp+12*8 | r8                        |
   722                                  ;              |---------------------------|
   723                                  ;     rsp+11*8 | r9                        |
   724                                  ;              |---------------------------|
   725                                  ;     rsp+10*8 | r10                       |
   726                                  ;              |---------------------------|
   727                                  ;     rsp+9*8  | r11                       |
   728                                  ;              |---------------------------|
   729                                  ;     rsp+8*8  | r12                       |
   730                                  ;              |---------------------------|
   731                                  ;     rsp+7*8  | r13                       |
   732                                  ;              |---------------------------|
   733                                  ;     rsp+6*8  | r14                       |
   734                                  ;              |---------------------------|
   735                                  ;     rsp+5*8  | r15                       |
   736                                  ;              |---------------------------|
   737                                  ;     rsp+4*8  | rflags                    |
   738                                  ;              |---------------------------|
   739                                  ;     rsp+3*8  | flag either -1 or 0       |
   740                                  ;              |---------------------------|
   741                                  ;     rsp+2*8  | original r15              |
   742                                  ;              |---------------------------|
   743                                  ;     rsp+1*8  | original r14              |
   744                                  ;              |---------------------------|
   745                                  ;     rsp      | original r13              |
   746                                  ;              |---------------------------|
   747                                  
   748 000000EA 4C8B4C2440              mov        r9, [rsp+8*8]
   749 000000EF 4C8B442448              mov        r8, [rsp+9*8]
   750 000000F4 488B4C2450              mov        rcx, [rsp+10*8]
   751 000000F9 488B542458              mov        rdx, [rsp+11*8]
   752 000000FE 488B742460              mov        rsi, [rsp+12*8]
   753 00000103 48BF-                   mov        rdi, .registerformat2
   754 00000105 [7D00000000000000] 
   755 0000010D B800000000              mov        rax, 0
   756 00000112 E8(00000000)            call       printf
   757                                  
   758 00000117 58                      pop        rax                                              ;Remove and discard original r13 from the stack
   759 00000118 58                      pop        rax                                              ;Remove and discard original r14 from the stack
   760 00000119 58                      pop        rax                                              ;Remove and discard original r15 from the stack
   761                                  
   762                                  ;===== State of the integer stack at this time ============================================================================================================================
   763                                  
   764                                  ;              |---------------------------|
   765                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   766                                  ;              |---------------------------|
   767                                  ;     rsp+18*8 | arbitrary number from user|
   768                                  ;              |---------------------------|
   769                                  ;     rsp+17*8 | return address            |
   770                                  ;              |---------------------------|
   771                                  ;     rsp+16*8 | rbp                       |
   772                                  ;              |---------------------------|
   773                                  ;     rsp+15*8 | rax                       |
   774                                  ;              |---------------------------|
   775                                  ;     rsp+14*8 | rbx                       |
   776                                  ;              |---------------------------|
   777                                  ;     rsp+13*8 | rcx                       |
   778                                  ;              |---------------------------|
   779                                  ;     rsp+12*8 | rdx                       |
   780                                  ;              |---------------------------|
   781                                  ;     rsp+11*8 | rsi                       |
   782                                  ;              |---------------------------|
   783                                  ;     rsp+10*8 | rdi                       |
   784                                  ;              |---------------------------|
   785                                  ;     rsp+9*8  | r8                        |
   786                                  ;              |---------------------------|
   787                                  ;     rsp+8*8  | r9                        |
   788                                  ;              |---------------------------|
   789                                  ;     rsp+7*8  | r10                       |
   790                                  ;              |---------------------------|
   791                                  ;     rsp+6*8  | r11                       |
   792                                  ;              |---------------------------|
   793                                  ;     rsp+5*8  | r12                       |
   794                                  ;              |---------------------------|
   795                                  ;     rsp+4*8  | r13                       |
   796                                  ;              |---------------------------|
   797                                  ;     rsp+3*8  | r14                       |
   798                                  ;              |---------------------------|
   799                                  ;     rsp+2*8  | r15                       |
   800                                  ;              |---------------------------|
   801                                  ;     rsp+1*8  | rflags                    |
   802                                  ;              |---------------------------|
   803                                  ;     rsp      | flag either -1 or 0       |
   804                                  ;              |---------------------------|
   805                                  
   806                                  ;===== Output the sixth and seventh lines of the register dump ============================================================================================================
   807                                  
   808                                  ;At this time the original value of rflags is at rsp+8, which is second quadword from the top.
   809                                  
   810                                  ;Go into the stack and get a copy of that original rflags
   811 0000011A 488B5C2408              mov qword rbx, [rsp+8]                                      ;Now rbx contain a copy of rflags.
   812                                  
   813                                  ;First part of CCC-64 parameter-passing protocol setup: do the pushes for the right most parameters
   814                                  ;Begin process to extract the cf bit, which is bit #0 from the right.
   815 0000011F 4889D8                  mov rax, rbx                                                ;Place a copy of rflags into rax
   816 00000122 4883E001                and rax, cmask                                              ;rax has all zero bits except possibly position 0.
   817 00000126 50                      push qword rax                                              ;Count: push #1 of this section
   818                                  
   819                                  ;Begin process to extract the pf bit
   820 00000127 4889D8                  mov rax, rbx                                                ;Place a new copy of rflags into rax
   821 0000012A 4883E004                and rax, pmask                                              ;rax has all zero bits except possible position 2
   822 0000012E 48C1E802                shr rax, 2                                                  ;The pf bit is bit #2 from the right.
   823 00000132 50                      push qword rax                                              ;Count: push #2 of this section
   824                                  
   825                                  ;Begin process to extract the af bit
   826 00000133 4889D8                  mov rax, rbx
   827 00000136 4883E010                and rax, amask
   828 0000013A 48C1E804                shr rax, 4                                                  ;The af bit is bit #4 from the right.
   829 0000013E 50                      push qword rax                                              ;Count: push #3 of this section
   830                                  
   831                                  ;===== State of the integer stack at this time ============================================================================================================================
   832                                  
   833                                  ;              |---------------------------|
   834                                  ;     rsp+22*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   835                                  ;              |---------------------------|
   836                                  ;     rsp+21*8 | arbitrary number from user|
   837                                  ;              |---------------------------|
   838                                  ;     rsp+20*8 | return address            |
   839                                  ;              |---------------------------|
   840                                  ;     rsp+19*8 | rbp                       |
   841                                  ;              |---------------------------|
   842                                  ;     rsp+18*8 | rax                       |
   843                                  ;              |---------------------------|
   844                                  ;     rsp+17*8 | rbx                       |
   845                                  ;              |---------------------------|
   846                                  ;     rsp+16*8 | rcx                       |
   847                                  ;              |---------------------------|
   848                                  ;     rsp+15*8 | rdx                       |
   849                                  ;              |---------------------------|
   850                                  ;     rsp+14*8 | rsi                       |
   851                                  ;              |---------------------------|
   852                                  ;     rsp+13*8 | rdi                       |
   853                                  ;              |---------------------------|
   854                                  ;     rsp+12*8 | r8                        |
   855                                  ;              |---------------------------|
   856                                  ;     rsp+11*8 | r9                        |
   857                                  ;              |---------------------------|
   858                                  ;     rsp+10*8 | r10                       |
   859                                  ;              |---------------------------|
   860                                  ;     rsp+9*8  | r11                       |
   861                                  ;              |---------------------------|
   862                                  ;     rsp+8*8  | r12                       |
   863                                  ;              |---------------------------|
   864                                  ;     rsp+7*8  | r13                       |
   865                                  ;              |---------------------------|
   866                                  ;     rsp+6*8  | r14                       |
   867                                  ;              |---------------------------|
   868                                  ;     rsp+5*8  | r15                       |
   869                                  ;              |---------------------------|
   870                                  ;     rsp+4*8  | rflags                    |
   871                                  ;              |---------------------------|
   872                                  ;     rsp+3*8  | flag either -1 or 0       |
   873                                  ;              |---------------------------|
   874                                  ;     rsp+2*8  | cf bit                    |
   875                                  ;              |---------------------------|
   876                                  ;     rsp+1*8  | pf bit                    |
   877                                  ;              |---------------------------|
   878                                  ;     rsp      | af bit                    |
   879                                  ;              |---------------------------|
   880                                  
   881                                  ;Second part of CCC-64 parameter-passing protocol setup: move data into the five fixed registers acting as parameters
   882                                  
   883                                  ;Begin process to extract the zf bit: the zero bit
   884 0000013F 4889D8                  mov rax, rbx
   885 00000142 4883E040                and rax, zmask
   886 00000146 48C1E806                shr rax, 6
   887 0000014A 4989C1                  mov qword r9, rax                                           ;Parameter #6 of CCC
   888                                  
   889                                  ;Begin process to extract the sf bit: the sign bit
   890 0000014D 4889D8                  mov rax, rbx
   891 00000150 482580000000            and rax, smask
   892 00000156 48C1E807                shr rax, 7
   893 0000015A 4989C0                  mov qword r8, rax                                           ;Parameter #5 of CCC
   894                                  
   895                                  ;Begin process to extract the of bit: the overflow bit
   896 0000015D 4889D8                  mov rax, rbx
   897 00000160 482500080000            and rax, omask
   898 00000166 48C1E80B                shr rax, 11
   899 0000016A 4889C1                  mov qword rcx, rax                                          ;Parameter #4 of CCC
   900                                  
   901                                  ;Copy the original rflags data to rdx
   902 0000016D 4889DA                  mov qword rdx, rbx                                          ;Parameter #3 of CCC
   903                                  ;
   904                                  ;rip is a highly protected register in the sense that it is the only one providing neither read nor write privileges.  Therefore, the programmer cannot assign a value to
   905                                  ;rip nor read the value in rip.  The one technique to obtain the value stored in rip is to call a subprogram such as this one, showregisterssubprogram.  The call will
   906                                  ;place a copy of rip on the integer stack.  That value can be retrieved later from the integer stack, and that is what is done here.  That value is the address of the
   907                                  ;next instruction to execute when the current subprogram returns.
   908                                  
   909                                  ;Copy the rip at the time this subprogram was called; the copy goes into rsi, which is parameter #2 of CCC
   910 00000170 488BB424A0000000        mov qword rsi, [rsp+20*qwordsize]                           ;We use the return address as the value of rip at the time instantly before showregisters is called.
   911                                  
   912 00000178 48BF-                   mov qword rdi, .registerformat3                             ;Parameter #1 of CCC
   913 0000017A [E600000000000000] 
   914                                  
   915                                  ;Third part of the CCC-64 protocol
   916 00000182 B800000000              mov qword rax, 0
   917 00000187 E8(00000000)            call printf
   918                                  
   919                                  ;Reverse the three recent pushes.
   920 0000018C 58                      pop rax                                                     ;Discard the qword containing the af bit
   921 0000018D 58                      pop rax                                                     ;Discard the qword containing the pf bit
   922 0000018E 58                      pop rax                                                     ;Discard the qword containing the cf bit
   923                                  
   924                                  ;===== State of the integer stack at this time ============================================================================================================================
   925                                  
   926                                  ;              |---------------------------|
   927                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   928                                  ;              |---------------------------|
   929                                  ;     rsp+18*8 | arbitrary number from user|
   930                                  ;              |---------------------------|
   931                                  ;     rsp+17*8 | return address            |
   932                                  ;              |---------------------------|
   933                                  ;     rsp+16*8 | rbp                       |
   934                                  ;              |---------------------------|
   935                                  ;     rsp+15*8 | rax                       |
   936                                  ;              |---------------------------|
   937                                  ;     rsp+14*8 | rbx                       |
   938                                  ;              |---------------------------|
   939                                  ;     rsp+13*8 | rcx                       |
   940                                  ;              |---------------------------|
   941                                  ;     rsp+12*8 | rdx                       |
   942                                  ;              |---------------------------|
   943                                  ;     rsp+11*8 | rsi                       |
   944                                  ;              |---------------------------|
   945                                  ;     rsp+10*8 | rdi                       |
   946                                  ;              |---------------------------|
   947                                  ;     rsp+9*8  | r8                        |
   948                                  ;              |---------------------------|
   949                                  ;     rsp+8*8  | r9                        |
   950                                  ;              |---------------------------|
   951                                  ;     rsp+7*8  | r10                       |
   952                                  ;              |---------------------------|
   953                                  ;     rsp+6*8  | r11                       |
   954                                  ;              |---------------------------|
   955                                  ;     rsp+5*8  | r12                       |
   956                                  ;              |---------------------------|
   957                                  ;     rsp+4*8  | r13                       |
   958                                  ;              |---------------------------|
   959                                  ;     rsp+3*8  | r14                       |
   960                                  ;              |---------------------------|
   961                                  ;     rsp+2*8  | r15                       |
   962                                  ;              |---------------------------|
   963                                  ;     rsp+1*8  | rflags                    |
   964                                  ;              |---------------------------|
   965                                  ;     rsp      | flag either -1 or 0       |
   966                                  ;              |---------------------------|
   967                                  
   968                                  ;==========================================================================================================================================================================
   969                                  ;===== Begin State Component Restore ======================================================================================================================================
   970                                  ;==========================================================================================================================================================================
   971                                  
   972                                  ;===== Check the flag to determine if state components were really backed up ==============================================================================================
   973                                  
   974 0000018F 5B                      pop        rbx                                              ;Obtain a copy of the flag that indicates state component backup or not.
   975                                  
   976 00000190 4883FB00                cmp        rbx, 0                                           ;If there was no backup of state components then jump past the restore section.
   977 00000194 7426                    je         setreturnvalue                                   ;Go to set up the return value.
   978                                  
   979                                  ;Continue with restoration of state components;
   980                                  
   981                                  ;Precondition: edx:eax must hold the state component bitmap.  Therefore, go get a new copy of that bitmap.
   982                                  
   983                                  ;Preconditions for obtaining the bitmap from the cpuid instruction
   984 00000196 B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
   985 0000019B B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
   986                                  
   987                                  ;Call the function
   988 000001A0 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
   989                                  
   990                                  ;Postcondition: The bitmap in now in edx:eax
   991                                  
   992                                  ;Future insurance: Make sure the bitmap is limited to a maximum of 3 state components.
   993 000001A2 41BF07000000            mov        r15, 7
   994 000001A8 4C21F8                  and        rax, r15
   995 000001AB 41BF00000000            mov        r15, 0
   996 000001B1 4C21FA                  and        rdx, r15
   997                                  
   998 000001B4 0FAE2C25[00000000]      xrstor     [.backuparea]
   999                                  
  1000                                  ;==========================================================================================================================================================================
  1001                                  ;===== End State Component Restore ========================================================================================================================================
  1002                                  ;==========================================================================================================================================================================
  1003                                  
  1004                                  
  1005                                  setreturnvalue: ;=========== Set the value to be returned to the caller ===================================================================================================
  1006                                  
  1007 000001BC B800000000              mov        rax, 0                                           ;Send 0 back to the caller indicating a successful termination
  1008                                  
  1009                                  ;=========== Restore GPR values and return to the caller ==================================================================================================================
  1010                                  
  1011 000001C1 9D                      popf                                                        ;Restore rflags
  1012 000001C2 415F                    pop        r15                                              ;Restore r15
  1013 000001C4 415E                    pop        r14                                              ;Restore r14
  1014 000001C6 415D                    pop        r13                                              ;Restore r13
  1015 000001C8 415C                    pop        r12                                              ;Restore r12
  1016 000001CA 415B                    pop        r11                                              ;Restore r11
  1017 000001CC 415A                    pop        r10                                              ;Restore r10
  1018 000001CE 4159                    pop        r9                                               ;Restore r9
  1019 000001D0 4158                    pop        r8                                               ;Restore r8
  1020 000001D2 5F                      pop        rdi                                              ;Restore rdi
  1021 000001D3 5E                      pop        rsi                                              ;Restore rsi
  1022 000001D4 5A                      pop        rdx                                              ;Restore rdx
  1023 000001D5 59                      pop        rcx                                              ;Restore rcx
  1024 000001D6 5B                      pop        rbx                                              ;Restore rbx
  1025 000001D7 4883C408                add        rsp, 8                                           ;Remove the old value of rax from the stack and discard that value.
  1026 000001DB 5D                      pop        rbp                                              ;Restore rbp
  1027                                  
  1028                                  ;The instruction "ret n" where n is a positive integer means "pop the stack once to obtain an address X where execution will resume, then add n to rsp effectively popping
  1029                                  ;n number of bytes, then resume execution at the address X".
  1030                                  
  1031 000001DC C20800                  ret 8                                                       ;Pop the integer stack and resume execution at the address that was popped from the stack.
  1032                                  
  1033                                  ;===== End of program showregisters ========================================================================================================================================
  1034                                  
  1035                                  
  1036                                  
  1037                                  
  1038                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
  1039                                  
  1040                                  
  1041                                  
  1042                                  ;==========================================================================================================================================================================
  1043                                  ;===== Begin subprogram dumpstack =====================================================================================================================================
  1044                                  ;===== Begin subprogram dumpstack=====================================================================================================================================
  1045                                  ;===== Begin subprogram dumpstack =====================================================================================================================================
  1046                                  ;==========================================================================================================================================================================
  1047                                  ;Module information
  1048                                  ;  This module's call name: dumpstacksubprogram
  1049                                  ;  Language: X86-64
  1050                                  ;  Syntax: Intel
  1051                                  ;  Date last modified: 2014-July-8
  1052                                  ;  Purpose: This module will show the contents of all integer registers including the flags register.
  1053                                  ;  Status: The present source code is in production.
  1054                                  ;
  1055                                  ;==========================================================================================================================================
  1056                                  ;                             Show Stack Subprogram
  1057                                  ;==========================================================================================================================================
  1058                                  ;
  1059                                  ;Program: showstacksubprogram
  1060                                  ;Purpose: Show the current state of the X86-64 stack.
  1061                                  ;This program is called by the macro code inside the file debug.inc.
  1062                                  ;A program should bring in the debug.inc into an application program via a statement such as
  1063                                  ;%include "debug.inc"
  1064                                  ;
  1065                                  ;File name: debug.asm
  1066                                  ;Language: X86-64 Intel syntax
  1067                                  ;Usage: CPSC240
  1068                                  ;Author: F. Holliday
  1069                                  ;Last update: 20130329
  1070                                  
  1071                                  ;Deficiency:  This program, showstacksubprogram, does not backup SSE2 registers.  This is a known issue and will be fixed as soon as time allows.
  1072                                  
  1073                                  ;Assemble: nasm -f elf64 -l debug.lis -o debug.o debug.asm
  1074                                  ;
  1075                                  ;Concerning the two pointers rbp and rsp.  The system stack, sometimes called the integer stack, is a built-in stack of 
  1076                                  ;quadwords.  (Don't confuse this stack with the floating point stack.)  The pointer rsp always points to the top of the
  1077                                  ;stack.  Use of the pointer rbp is optional.  That means that a programmer may use it or disregard it completely.  The
  1078                                  ;most common use of the rbp is to point to the start of a new activation record.  An activation record is created when
  1079                                  ;a subprogram is called, and it is destroyed when the subprogram returns.
  1080                                  ;
  1081                                  ;Important:  This program is built on rbp.  That means this program treats rbp as the top of the stack.  When calling
  1082                                  ;this program it requires three parameters: an arbitrary integer, the number of qwords outside of the stack to be
  1083                                  ;displayed, and the number of qwords inside the stack to be displayed.  Separator commas are placed after the first
  1084                                  ;and second parameters.  Example call:  dumpstack 59, 4, 10
  1085                                  
  1086                                  ;===== Sample of expected output from this subprogram =====================================================================================
  1087                                  
  1088                                  ;To view the integer stack using rbp as the top use a statement like the following:
  1089                                  ;  dumpstack 20, 2, 6
  1090                                  ;The results will be as in the following:
  1091                                  
  1092                                  ;Stack Dump # 20:  rbp = 00007fff3ab0bba0 rsp = 00007fff3ab0bb50
  1093                                  ;Offset    Address           Value
  1094                                  ;  +48  00007fff3ab0bbd0  0000000000000000
  1095                                  ;  +40  00007fff3ab0bbc8  00000000004006d0
  1096                                  ;  +32  00007fff3ab0bbc0  0000000100000000
  1097                                  ;  +24  00007fff3ab0bbb8  00007fff3ab0bc88
  1098                                  ;  +16  00007fff3ab0bbb0  0000000000000000
  1099                                  ;   +8  00007fff3ab0bba8  00007f318baf376d
  1100                                  ;   +0  00007fff3ab0bba0  0000000000000000
  1101                                  ;   -8  00007fff3ab0bb98  ffffffffffffff9d
  1102                                  ;  -16  00007fff3ab0bb90  00007fff3ab0bc80
  1103                                  
  1104                                  ;To view the integer stack using rsp as the top use a pair of statements like the following:
  1105                                  ;  mov rbp, rsp
  1106                                  ;  dumpstack 21, 2, 6
  1107                                  ;The results will be as in the following example
  1108                                  
  1109                                  ;Stack Dump # 21:  rbp = 00007fffe8e939b0 rsp = 00007fffe8e939b0
  1110                                  ;Offset    Address           Value
  1111                                  ;  +48  00007fffe8e939e0  00007fffe8e93a00
  1112                                  ;  +40  00007fffe8e939d8  00007fffe8e93a00
  1113                                  ;  +32  00007fffe8e939d0  00000000ffffffff
  1114                                  ;  +24  00007fffe8e939c8  00007f804ae98000
  1115                                  ;  +16  00007fffe8e939c0  0000000000000000
  1116                                  ;   +8  00007fffe8e939b8  00000000004004a0
  1117                                  ;   +0  00007fffe8e939b0  00000000ffffffff
  1118                                  ;   -8  00007fffe8e939a8  00007fffe8e939b0
  1119                                  ;  -16  00007fffe8e939a0  00007fffe8e939b0
  1120                                  
  1121                                  ;To view the contents of an array use a pair of statements like the following:
  1122                                  ;  mov rbp, myarray
  1123                                  ;  dumpstack 32, 0, 6
  1124                                  ;The contents of the array will be displayed in 8-bytes segments as in this example:
  1125                                  
  1126                                  ;Stack Dump # 32:  rbp = 0000000000602a28 rsp = 00007fffe8e939b0
  1127                                  ;Offset    Address           Value
  1128                                  ;  +48  0000000000602a58  0000000000000000
  1129                                  ;  +40  0000000000602a50  0000000000000000
  1130                                  ;  +32  0000000000602a48  0000000000000000
  1131                                  ;  +24  0000000000602a40  0000000000000000
  1132                                  ;  +16  0000000000602a38  0000000000000000
  1133                                  ;   +8  0000000000602a30  0000000000004000
  1134                                  ;   +0  0000000000602a28  c90fdaa22168c235
  1135                                  
  1136                                  ;==========================================================================================================================================
  1137                                  
  1138                                  ;Set constants via assembler directives
  1139                                  %define qwordsize qword 8                                   ;8 bytes
  1140                                  
  1141                                  extern printf
  1142                                  global showstacksubprogram                                  ;This declaration allows the subprogram to be called from outside this file.
  1143                                  
  1144                                  segment .data                                               ;This segment declares initialized data
  1145                                  
  1146 0000017D 537461636B2044756D-     stackheadformat db "Stack Dump # %d:  ", 
  1147 00000186 7020232025643A2020 
  1148 0000018F 726270203D20253031-                     db "rbp = %016lx rsp = %016lx", 10, 
  1149 00000198 366C7820727370203D-
  1150 000001A1 20253031366C780A   
  1151 000001A9 4F6666736574202020-                     db "Offset    Address           Value", 10, 0
  1152 000001B2 204164647265737320-
  1153 000001BB 202020202020202020-
  1154 000001C4 2056616C75650A00   
  1155                                  
  1156 000001CC 252B35642020253031-     stacklineformat db "%+5d  %016lx  %016lx", 10, 0
  1157 000001D5 366C78202025303136-
  1158 000001DE 6C780A00           
  1159                                  
  1160                                  segment .bss                                                ;This segment declares uninitialized data
  1161                                      ;This segment is empty
  1162                                  
  1163                                  segment .text                                               ;Executable instructions appear in this segment
  1164                                  
  1165                                  showstacksubprogram:                                        ;Where execution begins when this program is called.
  1166                                  
  1167                                  ;===== Backup all the registers that are used in this program =====================================================================
  1168 000001DF 55                      push rbp                                                    ;Backup the base pointer
  1169 000001E0 57                      push rdi                                                    ;Backup rdi
  1170 000001E1 56                      push rsi                                                    ;Backup rsi
  1171 000001E2 52                      push rdx                                                    ;Backup rdx
  1172 000001E3 51                      push rcx                                                    ;Backup rcx
  1173 000001E4 4150                    push r8                                                     ;Backup r8
  1174 000001E6 4151                    push r9                                                     ;Backup r9
  1175 000001E8 4152                    push r10                                                    ;Backup r10
  1176 000001EA 4153                    push r11                                                    ;Backup r11: printf often changes r11
  1177 000001EC 4154                    push r12                                                    ;Backup r12
  1178 000001EE 4155                    push r13                                                    ;Backup r13
  1179 000001F0 4156                    push r14                                                    ;Backup r14
  1180 000001F2 53                      push rbx                                                    ;Backup rbx
  1181 000001F3 9C                      pushf                                                       ;Backup rflags
  1182                                  ;r15 is not used in this subprogram.  rax is intentionally not backed up.
  1183                                  
  1184                                  ;===== Prepare to output the dump stack header =====================================================================================
  1185                                  ;At this time the integer stack has the following structure
  1186                                  ;              |---------------------------|
  1187                                  ;     rsp+19*8 | rsp                       |
  1188                                  ;              |---------------------------|
  1189                                  ;     rsp+18*8 | rbp                       |
  1190                                  ;              |---------------------------|
  1191                                  ;     rsp+17*8 | #qwords inside of stack   |
  1192                                  ;              |---------------------------|
  1193                                  ;     rsp+16*8 | #qwords outside of stack  |
  1194                                  ;              |---------------------------|
  1195                                  ;     rsp+15*8 | arbitrary number from user|
  1196                                  ;              |---------------------------|
  1197                                  ;     rsp+14*8 | return address            |
  1198                                  ;              |---------------------------|
  1199                                  ;     rsp+13*8 | rbp                       |
  1200                                  ;              |---------------------------|
  1201                                  ;     rsp+12*8 | rdi                       |
  1202                                  ;              |---------------------------|
  1203                                  ;     rsp+11*8 | rsi                       |
  1204                                  ;              |---------------------------|
  1205                                  ;     rsp+10*8 | rdx                       |
  1206                                  ;              |---------------------------|
  1207                                  ;     rsp+9*8  | rcx                       |
  1208                                  ;              |---------------------------|
  1209                                  ;     rsp+8*8  | r8                        |
  1210                                  ;              |---------------------------|
  1211                                  ;     rsp+7*8  | r9                        |
  1212                                  ;              |---------------------------|
  1213                                  ;     rsp+6*8  | r10                       |
  1214                                  ;              |---------------------------|
  1215                                  ;     rsp+5*8  | r11                       |
  1216                                  ;              |---------------------------|
  1217                                  ;     rsp+4*8  | r12                       |
  1218                                  ;              |---------------------------|
  1219                                  ;     rsp+3*8  | r13                       |
  1220                                  ;              |---------------------------|
  1221                                  ;     rsp+2*8  | r14                       |
  1222                                  ;              |---------------------------|
  1223                                  ;     rsp+1*8  | rbx                       |
  1224                                  ;              |---------------------------|
  1225                                  ;     rsp+0    | rflags                    |
  1226                                  ;              |---------------------------|
  1227                                  
  1228                                  ;===== Output the header prior to displaying the contents of memory =======================================================================
  1229                                  ;Assign values to be passed to printf for outputting the dump stack header
  1230 000001F4 48BF-                   mov qword rdi, stackheadformat                              ;The format of the header
  1231 000001F6 [7D01000000000000] 
  1232 000001FE 488B742478              mov qword rsi, [rsp+15*8]                                   ;Arbitrary number passed in from caller
  1233 00000203 488B942490000000        mov qword rdx, [rsp+18*8]                                   ;Retrieve the value of rbp
  1234 0000020B 488B8C2498000000        mov qword rcx, [rsp+19*8]                                   ;Retrieve the value of rsp
  1235 00000213 B800000000              mov qword rax, 0                                            ;Zero in rax signals to printf that no vector registers (xmm) are used.
  1236 00000218 E8(00000000)            call printf
  1237                                  
  1238                                  ;===== Set up conditions before entering a loop ===========================================================================================
  1239                                  ;Retrieve from the stack the number of qwords within the stack to be displayed
  1240 0000021D 4C8BAC2488000000        mov qword r13, [rsp+17*8]                                   ;r13 will serve as loop counter variable
  1241                                  ;Retrieve from the stack the number of qwords outside the stack to be displayed
  1242 00000225 4C8BB42480000000        mov qword r14, [rsp+16*8]                                   ;r14 will help define the loop termination condition
  1243 0000022D 49F7DE                  neg r14                                                     ;Negate r14.  Now r14 contains a negative integer
  1244                                  
  1245                                  ;Setup rbx as offset number that will appear in the first column of output.
  1246 00000230 488B842488000000        mov qword rax, [rsp+17*8]                                   ;Retrieve from the stack the number of qwords within the stack to be displayed.
  1247 00000238 41BC08000000            mov qword r12, 8                                            ;Temporarily store 8 in r12
  1248 0000023E 49F7E4                  mul r12                                                     ;Multiply rax by 8 bytes per qword
  1249 00000241 4889C3                  mov qword rbx, rax                                          ;Save the product in rbx (column 1 of output)
  1250                                  
  1251                                  ;Retrieve from the stack the original value of rbp; r12 will be the address that appears in the 2nd column of output.
  1252 00000244 4C8BA42490000000        mov qword r12, [rsp+18*8]                                   ;Copy rbp to r12
  1253 0000024C 4901DC                  add r12, rbx                                                ;Give r12 the first address to be display in column 2 of the output.
  1254                                  
  1255                                  beginloop:
  1256                                  
  1257                                  ;===== Prepare to output one line of the body of the stack dump ===========================================================================
  1258                                  ;Follow the CCC-64 protocol
  1259 0000024F 48BF-                   mov       rdi, stacklineformat                              ;Format for offset, address, and quadword value
  1260 00000251 [CC01000000000000] 
  1261 00000259 4889DE                  mov qword rsi, rbx                                          ;rbx stores the offset value
  1262 0000025C 4C89E2                  mov qword rdx, r12                                          ;r12 stores the address to be displayed
  1263 0000025F 488B0A                  mov qword rcx, [rdx]                                        ;rcx receives the contents of memory at rbp+40
  1264 00000262 B800000000              mov qword rax, 0                                            ;No vector registers contain data for printf
  1265 00000267 E8(00000000)            call printf
  1266                                  
  1267                                  ;===== Advance the variables 8 bytes in the direction of small addresses ==================================================================
  1268                                  
  1269 0000026C 4883EB08                sub rbx, 8                                                  ;rbx stores column 1, which is the offset value
  1270 00000270 4983EC08                sub r12, 8                                                  ;r12 stores column 2, which is the address value
  1271 00000274 49FFCD                  dec r13                                                     ;r13 is loop counter; it decrements from high value to low (possibly negative) value
  1272                                  
  1273                                  ;===== Check for loop termination condition ===============================================================================================
  1274 00000277 4D39F5                  cmp r13, r14                                                ;Compare loop variable r13 with terminating value r14
  1275 0000027A 7DD3                    jge beginloop                                               ;If r13 >= r14 then continue to iterate
  1276                                  
  1277                                  
  1278                                  ;OLD CODE BELOW -- This will eventually be removed
  1279                                  
  1280                                  ;===== Output the header prior to displaying the contents of memory =======================================================================
  1281                                  ;Assign values to be passed to printf for outputting the dump stack header
  1282                                  ;mov qword rdi, stackheadformat                              ;The format of the header
  1283                                  ;mov qword rsi, [rsp+10*8]                                   ;Arbitrary number passed in from caller
  1284                                  ;mov qword rdx, [rsp+13*8]                                   ;Retrieve the value of rbp
  1285                                  ;mov qword rcx, [rsp+14*8]                                   ;Retrieve the value of rsp
  1286                                  ;mov qword rax, 0                                            ;Zero in rax signals to printf that no vector registers (xmm) are used.
  1287                                  ;call printf
  1288                                  
  1289                                  ;===== Set up conditions before entering a loop ===========================================================================================
  1290                                  ;Retrieve from the stack the number of qwords within the stack to be displayed
  1291                                  ;mov qword r13, [rsp+12*8]                                   ;r13 will serve as loop counter variable
  1292                                  ;Retrieve from the stack the number of qwords outside the stack to be displayed
  1293                                  ;mov qword r14, [rsp+11*8]                                   ;r14 will help define the loop termination condition
  1294                                  ;neg r14                                                     ;Negate r14.  Now r14 contains a negative integer
  1295                                  
  1296                                  ;Setup rbx as offset number that will appear in the first column of output.
  1297                                  ;mov qword rax, [rsp+12*8]                                   ;Retrieve from the stack the number of qwords within the stack to be displayed.
  1298                                  ;mov qword r12, 8                                            ;Temporarily store 8 in r12
  1299                                  ;mul r12                                                     ;Multiply rax by 8 bytes per qword
  1300                                  ;mov qword rbx, rax                                          ;Save the product in rbx (column 1 of output)
  1301                                  
  1302                                  ;Retrieve from the stack the original value of rbp; r10 will be the address that appears in the 2nd column of output.
  1303                                  ;mov qword r10, [rsp+13*8]                                   ;Copy rbp to r10
  1304                                  ;add r10, rbx                                                ;Give r10 the first address to be display in column 2 of the output.
  1305                                  
  1306                                  ;beginloop:
  1307                                  
  1308                                  ;===== Prepare to output one line of the body of the stack dump ===========================================================================
  1309                                  ;Follow the CCC-64 protocol
  1310                                  ;mov       rdi, stacklineformat                              ;Format for offset, address, and quadword value
  1311                                  ;mov qword rsi, rbx                                          ;rbx stores the offset value
  1312                                  ;mov qword rdx, r10                                          ;r10 stores the address to be displayed
  1313                                  ;mov qword rcx, [rdx]                                        ;rcx receives the contents of memory at rbp+40
  1314                                  ;mov qword rax, 0                                            ;No vector registers contain data for printf
  1315                                  ;call printf
  1316                                  
  1317                                  ;===== Advance the variables 8 bytes in the direction of small addresses ==================================================================
  1318                                  
  1319                                  ;sub rbx, 8                                                  ;rbx stores column 1, which is the offset value
  1320                                  ;sub r10, 8                                                  ;r10 stores column 2, which is the address value
  1321                                  ;dec r13                                                     ;r13 is loop counter; it decrements from high value to low (possibly negative) value
  1322                                  
  1323                                  ;===== Check for loop termination condition ===============================================================================================
  1324                                  ;cmp r13, r14                                                ;Compare loop variable r13 with terminating value r14
  1325                                  ;jge beginloop                                               ;If r13 >= r14 then continue to iterate
  1326                                  
  1327                                  
  1328                                  ;END OLD CODE -- End of old stuff that will be removed.
  1329                                  
  1330                                  
  1331                                  ;===== Restore original values to integer registers =======================================================================================
  1332                                  
  1333 0000027C 9D                      popf                                                        ;Restore rflags
  1334 0000027D 5B                      pop rbx                                                     ;Restore rbx
  1335 0000027E 415E                    pop r14                                                     ;Restore r14
  1336 00000280 415D                    pop r13                                                     ;Restore r13
  1337 00000282 415C                    pop r12                                                     ;Restore r12
  1338 00000284 415B                    pop r11                                                     ;Restore r11
  1339 00000286 415A                    pop r10                                                     ;Restore r10
  1340 00000288 4159                    pop r9                                                      ;Restore r9
  1341 0000028A 4158                    pop r8                                                      ;Restore r8
  1342 0000028C 59                      pop rcx                                                     ;Restore rcx
  1343 0000028D 5A                      pop rdx                                                     ;Restore rdx
  1344 0000028E 5E                      pop rsi                                                     ;Restore rsi
  1345 0000028F 5F                      pop rdi                                                     ;Restore rdi
  1346 00000290 5D                      pop rbp                                                     ;Restore rbp
  1347                                  
  1348                                  ;Now the number of 8-byte pushes equals the number of 8-byte pops.
  1349                                  ;
  1350                                  ;It is time to leave this program.
  1351 00000291 C22800                  ret 40                                                      ;Return to address on top of stack and add 5*8 to rsp.
  1352                                  ;End of showstacksubprogram
  1353                                  
  1354                                  ;==========================================================================================================================================
  1355                                  ;                             Show FPU registers subprogram
  1356                                  ;==========================================================================================================================================
  1357                                  ;
  1358                                  ;Program: showfpusubprogram
  1359                                  ;Purpose: Show the current state of the FPU87 stack of registers.  Each member of the stack is an individual 10-bytes register in FPU87 
  1360                                  ;extended format.
  1361                                  ;This program is called by the macro code inside the file debug.inc.
  1362                                  ;A program should bring in the debug.inc into an application program via a statement such as
  1363                                  ;%include "debug.inc"
  1364                                  ;
  1365                                  ;File name: debug.asm
  1366                                  ;Language: X86-64
  1367                                  ;Usage: CPSC240
  1368                                  ;Author: F. Holliday
  1369                                  ;Last update: 2012-April-27
  1370                                  
  1371                                  ;Credit: The concepts for this program "showfpusubprogram" originated with a similar program written by Dr Paul Carter, and posted at the
  1372                                  ;website www.drpaulcarter.com/pcasm .  His original program is somewhat more sophisticated than this one; for example, to allocate space on
  1373                                  ;the integer stack he does not perform 14 individual pushes of one quadword per push.  He uses more advanced techniques to accomplish his 
  1374                                  ;goals, and thereby needs fewer instructions.  Nevertheless, this program implements much of his original work using simpler and more 
  1375                                  ;tedious programming techniques.
  1376                                  
  1377                                  ;Deficiency:  This program, showfpusubprogram, does not backup SSE2 registers.  This is a known issue and will be fixed as soon as time allows.
  1378                                  
  1379                                  ;Assemble: nasm -f elf64 -l debug.lis -o debug.o debug.asm
  1380                                  
  1381                                  ;Give a name to a famous number via assembler directive
  1382                                  %define qwordsize 8                                         ;8 bytes
  1383                                  
  1384                                  ;Set masks for Control Word via assembler directives
  1385                                  %define xcontrol 0000000000001000h                          ;bit #12
  1386                                  %define rcontrol 0000000000000c00h                          ;bits #10-11
  1387                                  %define pcontrol 0000000000000300h                          ;bits #8-9
  1388                                  %define pmask    0000000000000020h                          ;bit #5
  1389                                  %define umask    0000000000000010h                          ;bit #4
  1390                                  %define omask    0000000000000008h                          ;bit #3
  1391                                  %define zmask    0000000000000004h                          ;bit #2
  1392                                  %define dmask    0000000000000002h                          ;bit #1
  1393                                  %define imask    0000000000000001h                          ;bit #0 
  1394                                  
  1395                                  ;Set masks for Status Word via assembler directives
  1396                                  %define iemask 0000000000000001h                            ;bit #0
  1397                                  %define demask 0000000000000002h                            ;bit #1
  1398                                  %define zemask 0000000000000004h                            ;bit #2
  1399                                  %define oemask 0000000000000008h                            ;bit #3
  1400                                  %define uemask 0000000000000010h                            ;bit #4
  1401                                  %define pemask 0000000000000020h                            ;bit #5
  1402                                  %define sfmask 0000000000000040h                            ;bit #6
  1403                                  %define esmask 0000000000000080h                            ;bit #7
  1404                                  %define c0mask 0000000000000100h                            ;bit #8
  1405                                  %define c1mask 0000000000000200h                            ;bit #9
  1406                                  %define c2mask 0000000000000400h                            ;bit #10
  1407                                  %define tpmask 0000000000003800h                            ;bits #11-13
  1408                                  %define c3mask 0000000000004000h                            ;bit #14
  1409                                  %define bmask  0000000000008000h                            ;bit #15
  1410                                  
  1411                                  ;Set masks for the Tag Word via assembler directives
  1412                                  %define tag7mask 000000000000c000h                          ;bits #14-15
  1413                                  %define tag6mask 0000000000003000h                          ;bits #12-13
  1414                                  %define tag5mask 0000000000000c00h                          ;bits #10-11
  1415                                  %define tag4mask 0000000000000300h                          ;bits #8-9
  1416                                  %define tag3mask 00000000000000c0h                          ;bits #6-7
  1417                                  %define tag2mask 0000000000000030h                          ;bits #4-5
  1418                                  %define tag1mask 000000000000000ch                          ;bits #2-3
  1419                                  %define tag0mask 0000000000000003h                          ;bits #0-1
  1420                                  
  1421                                  extern printf
  1422                                  
  1423                                  segment .data                                               ;This segment declares initialized data
  1424                                  
  1425 000001E2 0A5838372046505520-     x87headformat db 10, "X87 FPU Display #%d", 10, "Control Word = %.4x Status Word = %.4x Tag Word = %.4x", 10, 0
  1426 000001EB 446973706C61792023-
  1427 000001F4 25640A436F6E74726F-
  1428 000001FD 6C20576F7264203D20-
  1429 00000206 252E34782053746174-
  1430 0000020F 757320576F7264203D-
  1431 00000218 20252E347820546167-
  1432 00000221 20576F7264203D2025-
  1433 0000022A 2E34780A00         
  1434 0000022F 257300                  stringformat db "%s", 0
  1435 00000232 526567697374657220-     columnheadings db "Register Extended hex number   Tag", 10, 0
  1436 0000023B 457874656E64656420-
  1437 00000244 686578206E756D6265-
  1438 0000024D 722020205461670A00 
  1439 00000256 202073743720202020-     st7format db "  st7    %04x%016lx  %s", 10, 0
  1440 0000025F 25303478253031366C-
  1441 00000268 78202025730A00     
  1442 0000026F 202073743620202020-     st6format db "  st6    %04x%016lx  %s", 10, 0
  1443 00000278 25303478253031366C-
  1444 00000281 78202025730A00     
  1445 00000288 202073743520202020-     st5format db "  st5    %04x%016lx  %s", 10, 0
  1446 00000291 25303478253031366C-
  1447 0000029A 78202025730A00     
  1448 000002A1 202073743420202020-     st4format db "  st4    %04x%016lx  %s", 10, 0
  1449 000002AA 25303478253031366C-
  1450 000002B3 78202025730A00     
  1451 000002BA 202073743320202020-     st3format db "  st3    %04x%016lx  %s", 10, 0
  1452 000002C3 25303478253031366C-
  1453 000002CC 78202025730A00     
  1454 000002D3 202073743220202020-     st2format db "  st2    %04x%016lx  %s", 10, 0
  1455 000002DC 25303478253031366C-
  1456 000002E5 78202025730A00     
  1457 000002EC 202073743120202020-     st1format db "  st1    %04x%016lx  %s", 10, 0
  1458 000002F5 25303478253031366C-
  1459 000002FE 78202025730A00     
  1460 00000305 202073743020202020-     st0format db "  st0    %04x%016lx  %s", 10, 0
  1461 0000030E 25303478253031366C-
  1462 00000317 78202025730A00     
  1463                                  ;
  1464 0000031E 456D707479206F7220-     emptyspace db "Empty or Free space", 0
  1465 00000327 467265652073706163-
  1466 00000330 6500               
  1467 00000332 56616C6964206E756D-     validnumber db "Valid number", 0
  1468 0000033B 62657200           
  1469 0000033F 5A65726F206E756D62-     floatingpointzero db "Zero number", 0
  1470 00000348 657200             
  1471 0000034B 5370656369616C3A20-     specialnumber db "Special: denormal, infinity, or nan", 0
  1472 00000354 64656E6F726D616C2C-
  1473 0000035D 20696E66696E697479-
  1474 00000366 2C206F72206E616E00 
  1475 0000036F 0A00                    newline db 10, 0 ;temporary
  1476                                  ;
  1477                                  ;Information about the FPU Control Word was obtained from http://www.c-jump.com/CIS77/reference/Intel/CIS77_24319002/index.html ==> Section 7.3.4
  1478 00000371 436F6E74726F6C2077-     controlwordheading db "Control word by individual components:", 10, "Bit# Value Mnemonic Description", 10, 0
  1479 0000037A 6F726420627920696E-
  1480 00000383 646976696475616C20-
  1481 0000038C 636F6D706F6E656E74-
  1482 00000395 733A0A426974232056-
  1483 0000039E 616C7565204D6E656D-
  1484 000003A7 6F6E69632044657363-
  1485 000003B0 72697074696F6E0A00 
  1486 000003B9 31332D313520202D20-     controlwordbit15_13 db "13-15  -     --     Unused", 10, 0
  1487 000003C2 202020202D2D202020-
  1488 000003CB 2020556E757365640A-
  1489 000003D4 00                 
  1490 000003D5 203132202020202530-     controlwordbit12 db " 12    %01x     X      Infinity control", 10, 0
  1491 000003DE 317820202020205820-
  1492 000003E7 2020202020496E6669-
  1493 000003F0 6E69747920636F6E74-
  1494 000003F9 726F6C0A00         
  1495 000003FE 31302D313120202530-     controlwordbit11_10 db "10-11  %01x     RC     Rounding control", 10, 0
  1496 00000407 317820202020205243-
  1497 00000410 2020202020526F756E-
  1498 00000419 64696E6720636F6E74-
  1499 00000422 726F6C0A00         
  1500 00000427 20382D392020202530-     controlwordbit9_8 db " 8-9   %01x     PC     Precision control", 10, 0
  1501 00000430 317820202020205043-
  1502 00000439 202020202050726563-
  1503 00000442 6973696F6E20636F6E-
  1504 0000044B 74726F6C0A00       
  1505 00000451 20362D372020202D20-     controlwordbit7_6 db " 6-7   -     --     Unused", 10, 0
  1506 0000045A 202020202D2D202020-
  1507 00000463 2020556E757365640A-
  1508 0000046C 00                 
  1509 0000046D 202035202020202530-     controlwordbit5 db "  5    %01x     PM     Precision mask", 10, 0
  1510 00000476 31782020202020504D-
  1511 0000047F 202020202050726563-
  1512 00000488 6973696F6E206D6173-
  1513 00000491 6B0A00             
  1514 00000494 202034202020202530-     controlwordbit4 db "  4    %01x     UM     Underflow mask", 10, 0
  1515 0000049D 31782020202020554D-
  1516 000004A6 2020202020556E6465-
  1517 000004AF 72666C6F77206D6173-
  1518 000004B8 6B0A00             
  1519 000004BB 202033202020202530-     controlwordbit3 db "  3    %01x     OM     Overflow mask", 10, 0
  1520 000004C4 317820202020204F4D-
  1521 000004CD 20202020204F766572-
  1522 000004D6 666C6F77206D61736B-
  1523 000004DF 0A00               
  1524 000004E1 202032202020202530-     controlwordbit2 db "  2    %01x     ZM     Zero divide mask", 10, 0
  1525 000004EA 317820202020205A4D-
  1526 000004F3 20202020205A65726F-
  1527 000004FC 20646976696465206D-
  1528 00000505 61736B0A00         
  1529 0000050A 202031202020202530-     controlwordbit1 db "  1    %01x     DM     Denormalized operand mask", 10, 0
  1530 00000513 31782020202020444D-
  1531 0000051C 202020202044656E6F-
  1532 00000525 726D616C697A656420-
  1533 0000052E 6F706572616E64206D-
  1534 00000537 61736B0A00         
  1535 0000053C 202030202020202530-     controlwordbit0 db "  0    %01x     IM     Invalid operation mask", 10, 0            
  1536 00000545 31782020202020494D-
  1537 0000054E 2020202020496E7661-
  1538 00000557 6C6964206F70657261-
  1539 00000560 74696F6E206D61736B-
  1540 00000569 0A00               
  1541                                  
  1542                                  ;Reference regarding FPU Status Word: Plantz (2012), Table 14.4, page 355.
  1543 0000056B 53746174757320776F-     statuswordheading db "Status word by individual bits (Plantz, page 355):", 10, "Bit# Value Mnemonic Description", 10, 0
  1544 00000574 726420627920696E64-
  1545 0000057D 6976696475616C2062-
  1546 00000586 6974732028506C616E-
  1547 0000058F 747A2C207061676520-
  1548 00000598 333535293A0A426974-
  1549 000005A1 232056616C7565204D-
  1550 000005AA 6E656D6F6E69632044-
  1551 000005B3 65736372697074696F-
  1552 000005BC 6E0A00             
  1553 000005BF 202030202020202530-     statuswordbit0 db "  0    %01x     IE     Invalid operation", 10, 0
  1554 000005C8 317820202020204945-
  1555 000005D1 2020202020496E7661-
  1556 000005DA 6C6964206F70657261-
  1557 000005E3 74696F6E0A00       
  1558 000005E9 202031202020202530-     statuswordbit1 db "  1    %01x     DE     Denormalized operation", 10, 0
  1559 000005F2 317820202020204445-
  1560 000005FB 202020202044656E6F-
  1561 00000604 726D616C697A656420-
  1562 0000060D 6F7065726174696F6E-
  1563 00000616 0A00               
  1564 00000618 202032202020202530-     statuswordbit2 db "  2    %01x     ZE     Zero divide", 10, 0
  1565 00000621 317820202020205A45-
  1566 0000062A 20202020205A65726F-
  1567 00000633 206469766964650A00 
  1568 0000063C 202033202020202530-     statuswordbit3 db "  3    %01x     OE     Overflow", 10, 0
  1569 00000645 317820202020204F45-
  1570 0000064E 20202020204F766572-
  1571 00000657 666C6F770A00       
  1572 0000065D 202034202020202530-     statuswordbit4 db "  4    %01x     UE     Underflow", 10, 0
  1573 00000666 317820202020205545-
  1574 0000066F 2020202020556E6465-
  1575 00000678 72666C6F770A00     
  1576 0000067F 202035202020202530-     statuswordbit5 db "  5    %01x     PE     Precision", 10, 0
  1577 00000688 317820202020205045-
  1578 00000691 202020202050726563-
  1579 0000069A 6973696F6E0A00     
  1580 000006A1 202036202020202530-     statuswordbit6 db "  6    %01x     SF     Stack fault", 10, 0
  1581 000006AA 317820202020205346-
  1582 000006B3 202020202053746163-
  1583 000006BC 6B206661756C740A00 
  1584 000006C5 202037202020202530-     statuswordbit7 db "  7    %01x     ES     Error summary status", 10, 0
  1585 000006CE 317820202020204553-
  1586 000006D7 20202020204572726F-
  1587 000006E0 722073756D6D617279-
  1588 000006E9 207374617475730A00 
  1589 000006F2 202038202020202530-     statuswordbit8 db "  8    %01x     C0     Condition code 0", 10, 0
  1590 000006FB 317820202020204330-
  1591 00000704 2020202020436F6E64-
  1592 0000070D 6974696F6E20636F64-
  1593 00000716 6520300A00         
  1594 0000071B 202039202020202530-     statuswordbit9 db "  9    %01x     C1     Condition code 1", 10, 0
  1595 00000724 317820202020204331-
  1596 0000072D 2020202020436F6E64-
  1597 00000736 6974696F6E20636F64-
  1598 0000073F 6520310A00         
  1599 00000744 203130202020202530-     statuswordbit10 db " 10    %01x     C2     Condition code 2", 10, 0
  1600 0000074D 317820202020204332-
  1601 00000756 2020202020436F6E64-
  1602 0000075F 6974696F6E20636F64-
  1603 00000768 6520320A00         
  1604 0000076D 31312D313320202530-     statuswordbit11_13 db "11-13  %01x     TOP    Top of stack", 10, 0
  1605 00000776 31782020202020544F-
  1606 0000077F 5020202020546F7020-
  1607 00000788 6F6620737461636B0A-
  1608 00000791 00                 
  1609 00000792 203134202020202530-     statuswordbit14 db " 14    %01x     C3     Condition code 3", 10, 0
  1610 0000079B 317820202020204333-
  1611 000007A4 2020202020436F6E64-
  1612 000007AD 6974696F6E20636F64-
  1613 000007B6 6520330A00         
  1614 000007BB 203135202020202530-     statuswordbit15 db " 15    %01x     B      FPU busy", 10, 0
  1615 000007C4 317820202020204220-
  1616 000007CD 202020202046505520-
  1617 000007D6 627573790A00       
  1618                                  ;
  1619                                  ;Information about the Tag Word was obtained from http://www.c-jump.com/CIS77/reference/Intel/CIS77_24319002/index.html ==> Section 7.3.6
  1620 000007DC 54616720776F726420-     tagwordheading db "Tag word by individual components each of size 2 bits:", 10,
  1621 000007E5 627920696E64697669-
  1622 000007EE 6475616C20636F6D70-
  1623 000007F7 6F6E656E7473206561-
  1624 00000800 6368206F662073697A-
  1625 00000809 65203220626974733A-
  1626 00000812 0A                 
  1627 00000813 5461672076616C7565-                    db "Tag values: 0=Valid number, 1=Floating point zero, 2=Special number (denormal, infinity, or nan), 3=Empty register (free space)", 10
  1628 0000081C 733A20303D56616C69-
  1629 00000825 64206E756D6265722C-
  1630 0000082E 20313D466C6F617469-
  1631 00000837 6E6720706F696E7420-
  1632 00000840 7A65726F2C20323D53-
  1633 00000849 70656369616C206E75-
  1634 00000852 6D626572202864656E-
  1635 0000085B 6F726D616C2C20696E-
  1636 00000864 66696E6974792C206F-
  1637 0000086D 72206E616E292C2033-
  1638 00000876 3D456D707479207265-
  1639 0000087F 676973746572202866-
  1640 00000888 726565207370616365-
  1641 00000891 290A               
  1642 00000893 426974232056616C75-                    db "Bit# Value   Description", 10, 0
  1643 0000089C 652020204465736372-
  1644 000008A5 697074696F6E0A00   
  1645 000008AD 31342D313520202530-     tag7bits15_14 db "14-15  %01x     Tag7", 10, 0
  1646 000008B6 317820202020205461-
  1647 000008BF 67370A00           
  1648 000008C3 31322D313320202530-     tag6bits13_12 db "12-13  %01x     Tag6", 10, 0
  1649 000008CC 317820202020205461-
  1650 000008D5 67360A00           
  1651 000008D9 31302D313120202530-     tag5bits11_10 db "10-11  %01x     Tag5", 10, 0
  1652 000008E2 317820202020205461-
  1653 000008EB 67350A00           
  1654 000008EF 20382D392020202530-     tag4bits9_8 db " 8-9   %01x     Tag4", 10, 0
  1655 000008F8 317820202020205461-
  1656 00000901 67340A00           
  1657 00000905 20362D372020202530-     tag3bits7_6 db " 6-7   %01x     Tag3", 10, 0
  1658 0000090E 317820202020205461-
  1659 00000917 67330A00           
  1660 0000091B 20342D352020202530-     tag2bits5_4 db " 4-5   %01x     Tag2", 10, 0
  1661 00000924 317820202020205461-
  1662 0000092D 67320A00           
  1663 00000931 20322D332020202530-     tag1bits3_2 db " 2-3   %01x     Tag1", 10, 0
  1664 0000093A 317820202020205461-
  1665 00000943 67310A00           
  1666 00000947 20302D312020202530-     tag0bits1_0 db " 0-1   %01x     Tag0", 10, 0
  1667 00000950 317820202020205461-
  1668 00000959 67300A00           
  1669                                  
  1670 0000095D 456E64206F66204650-     farewell db "End of FPU87 stack dump", 10, 0
  1671 00000966 55383720737461636B-
  1672 0000096F 2064756D700A00     
  1673                                  
  1674                                  segment .bss                                                ;This segment declares uninitialized data
  1675                                  ;
  1676                                  segment .text                                               ;This segment contains executable instructions
  1677                                  global showfpusubprogram                                    ;fpu refers to X87FPU also known as the st stack.
  1678                                  
  1679                                  showfpusubprogram:                                          ;A place where execution begins when this program is called.
  1680                                  
  1681                                  ;Safe programming practice: save all the data that may possibly be modified within this subprogram.  Intentionally the registers rsp and 
  1682                                  ;rax are not backed up.
  1683 00000294 55                      push rbp                                                    ;Back up the very important base pointer register
  1684 00000295 57                      push rdi                                                    ;Back up rdi
  1685 00000296 56                      push rsi                                                    ;Back up rsi
  1686 00000297 52                      push rdx                                                    ;Back up rdx
  1687 00000298 51                      push rcx                                                    ;Back up rcx
  1688 00000299 4150                    push r8                                                     ;Back up r8
  1689 0000029B 4151                    push r9                                                     ;Back up r9
  1690 0000029D 4152                    push r10                                                    ;Back up r10
  1691 0000029F 4153                    push r11                                                    ;Back up r11
  1692 000002A1 4154                    push r12                                                    ;Back up r12
  1693 000002A3 4155                    push r13                                                    ;Back up r13
  1694 000002A5 4156                    push r14                                                    ;Back up r14
  1695 000002A7 4157                    push r15                                                    ;Back up r15
  1696 000002A9 53                      push rbx                                                    ;Back up rbx
  1697 000002AA 9C                      pushf                                                       ;Back up rflags
  1698                                  
  1699                                  ;= = = = = = Begin instructions to output X87 FPU = = = = = = = = =
  1700                                  ;
  1701                                  ;108 bytes of free storage is needed to store an image of the FPU.
  1702                                  ;Here we create 112 bytes of storage (14 qwords).
  1703 000002AB B800000000              mov qword rax, 0
  1704 000002B0 50                      push rax  ;push #1
  1705 000002B1 50                      push rax  ;push #2
  1706 000002B2 50                      push rax  ;push #3
  1707 000002B3 50                      push rax  ;push #4
  1708 000002B4 50                      push rax  ;push #5
  1709 000002B5 50                      push rax  ;push #6
  1710 000002B6 50                      push rax  ;push #7
  1711 000002B7 50                      push rax  ;push #8
  1712 000002B8 50                      push rax  ;push #9
  1713 000002B9 50                      push rax  ;push #10
  1714 000002BA 50                      push rax  ;push #11
  1715 000002BB 50                      push rax  ;push #12
  1716 000002BC 50                      push rax  ;push #13
  1717 000002BD 50                      push rax  ;push #14
  1718                                  
  1719                                  ;Place a copy of the entire FPU into the first 108 bytes of storage.
  1720 000002BE 9BDD3424                fsave [rsp]                                       ;There is an alternate command 'fnsave' that is less safe.  Here fsave is used.  After execution of
  1721                                  ;                                                 ;fsave the entire fpu is reset; that is, all data are wiped clean identical to using the finit or
  1722                                  ;                                                 ;the fninit instruction.
  1723                                  
  1724                                  ;Prepare for outputting the header line
  1725 000002C2 48BF-                   mov rdi, x87headformat                            ;Copy the starting address of the format to the first standard parameter, namely: rdi
  1726 000002C4 [E201000000000000] 
  1727 000002CC 488BB424F0000000        mov qword rsi, [rsp+30*qwordsize]                 ;Copy the identifier number provided by the caller to the second standard parameter, namely: rsi
  1728 000002D4 668B1C24                mov word bx, [rsp]                                ;Retrieve the control word
  1729 000002D8 4881E3FFFF0000          and rbx, 000000000000ffffh                        ;Make sure the high order bits of rbx are zeros; only the low order word is preserved
  1730 000002DF 4889DA                  mov rdx, rbx                                      ;Copy the control word to the third standard parameter, namely: rdx
  1731 000002E2 668B5C2404              mov word bx, [rsp+4]                              ;Get the status word
  1732 000002E7 4881E3FFFF0000          and rbx, 000000000000ffffh                        ;Make sure the high order bits of rbx are zeros; only the low order word is preserved
  1733 000002EE 4889D9                  mov rcx, rbx                                      ;Copy the status word to the fourth standard parameter, namely: rcx
  1734 000002F1 668B5C2408              mov word bx, [rsp+8]                              ;Get the tag word
  1735 000002F6 4881E3FFFF0000          and rbx, 000000000000ffffh                        ;Make sure the high order bits of rbx are zeros; only the low order word is preserved
  1736 000002FD 4989D8                  mov r8, rbx                                       ;Copy the tag word to the fifth standard parameter, namely: r8
  1737 00000300 B800000000              mov qword rax, 0                                  ;Set rax to 0 as standard signal to printf that only integer parameters are in use.
  1738 00000305 E8(00000000)            call printf
  1739                                  ;
  1740                                  ;
  1741                                  ;===== Begin section that outputs the contents of the Control Word ========================================================================
  1742                                  ;
  1743 0000030A 48BF-                   mov rdi, stringformat                             ;Set up for outputting headings over individual columns of the control word
  1744 0000030C [2F02000000000000] 
  1745 00000314 48BE-                   mov rsi, controlwordheading                       ;Provide the text for each heading over each column
  1746 00000316 [7103000000000000] 
  1747 0000031E B800000000              mov qword rax, 0                                  ;rax must be zero unless the output includes fp numbers
  1748 00000323 E8(00000000)            call printf
  1749                                  
  1750 00000328 41BF00000000            mov qword r15, 0
  1751 0000032E 66448B3C24              mov word r15w, [rsp]                              ;r15 is the backup copy of the control word; r15w is the lowest 16 bits of r15
  1752                                  
  1753 00000333 48BF-                   mov rdi, stringformat                             ;Set up for string output only; no numeric outputs
  1754 00000335 [2F02000000000000] 
  1755 0000033D 48BE-                   mov rsi, controlwordbit15_13                      ;Assign the start of the text to rsi
  1756 0000033F [B903000000000000] 
  1757 00000347 B800000000              mov qword rax, 0
  1758 0000034C E8(00000000)            call printf
  1759                                  
  1760 00000351 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word
  1761 00000354 4881E300100000          and rbx, xcontrol                                 ;Zero out all bits of the control word except bit #12
  1762 0000035B 48C1EB0C                shr rbx, 12                                       ;Shift bit number 12 to position #0
  1763 0000035F 48BF-                   mov rdi, controlwordbit12
  1764 00000361 [D503000000000000] 
  1765 00000369 4889DE                  mov rsi, rbx
  1766 0000036C B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1767 00000371 E8(00000000)            call printf
  1768                                  
  1769 00000376 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word
  1770 00000379 4881E3000C0000          and rbx, rcontrol                                 ;Zero out all bits of the control word except bits #10 and 11
  1771 00000380 48C1EB0A                shr rbx, 10                                       ;Shift bit number 10 to position #0
  1772 00000384 48BF-                   mov rdi, controlwordbit11_10
  1773 00000386 [FE03000000000000] 
  1774 0000038E 4889DE                  mov rsi, rbx
  1775 00000391 B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1776 00000396 E8(00000000)            call printf
  1777                                  ;
  1778 0000039B 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1779 0000039E 4881E300030000          and rbx, pcontrol
  1780 000003A5 48C1EB08                shr rbx, 8                                        ;Shift bit number 8 to position #0
  1781 000003A9 48BF-                   mov rdi, controlwordbit9_8
  1782 000003AB [2704000000000000] 
  1783 000003B3 4889DE                  mov rsi, rbx
  1784 000003B6 B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1785 000003BB E8(00000000)            call printf
  1786                                  ;
  1787 000003C0 48BF-                   mov rdi, stringformat                             ;Output a string message only; no numeric values will be displayed
  1788 000003C2 [2F02000000000000] 
  1789 000003CA 48BE-                   mov rsi, controlwordbit7_6                        ;Bits 7 and 6 are not used
  1790 000003CC [5104000000000000] 
  1791 000003D4 B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1792 000003D9 E8(00000000)            call printf
  1793                                  ;
  1794 000003DE 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1795 000003E1 4883E320                and rbx, pmask
  1796 000003E5 48C1EB05                shr rbx, 5                                        ;Shift bit number 5 to position #0
  1797 000003E9 48BF-                   mov rdi, controlwordbit5
  1798 000003EB [6D04000000000000] 
  1799 000003F3 4889DE                  mov rsi, rbx
  1800 000003F6 B800000000              mov qword rax, 0
  1801 000003FB E8(00000000)            call printf
  1802                                  ;
  1803 00000400 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word
  1804 00000403 4883E310                and rbx, umask
  1805 00000407 48C1EB04                shr rbx, 4                                        ;Shift bit number 4 to position #0
  1806 0000040B 48BF-                   mov rdi, controlwordbit4
  1807 0000040D [9404000000000000] 
  1808 00000415 4889DE                  mov rsi, rbx
  1809 00000418 B800000000              mov qword rax, 0
  1810 0000041D E8(00000000)            call printf
  1811                                  ;
  1812 00000422 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1813 00000425 4883E308                and rbx, omask                                    ;Zero out all bits except bit #3
  1814 00000429 48C1EB03                shr rbx, 3                                        ;Shift bit number 3 to position #0
  1815 0000042D 48BF-                   mov rdi, controlwordbit3
  1816 0000042F [BB04000000000000] 
  1817 00000437 4889DE                  mov rsi, rbx
  1818 0000043A B800000000              mov qword rax, 0
  1819 0000043F E8(00000000)            call printf
  1820                                  ;
  1821 00000444 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1822 00000447 4883E304                and rbx, zmask
  1823 0000044B 48C1EB02                shr rbx, 2
  1824 0000044F 48BF-                   mov rdi, controlwordbit2
  1825 00000451 [E104000000000000] 
  1826 00000459 4889DE                  mov rsi, rbx
  1827 0000045C B800000000              mov qword rax, 0
  1828 00000461 E8(00000000)            call printf
  1829                                  ;
  1830 00000466 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1831 00000469 4883E302                and rbx, dmask
  1832 0000046D 48D1EB                  shr rbx, 1
  1833 00000470 48BF-                   mov rdi, controlwordbit1
  1834 00000472 [0A05000000000000] 
  1835 0000047A 4889DE                  mov rsi, rbx
  1836 0000047D B800000000              mov qword rax, 0
  1837 00000482 E8(00000000)            call printf
  1838                                  ;
  1839 00000487 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1840 0000048A 4883E301                and rbx, imask
  1841                                  ;No shifting of bits is necessary
  1842 0000048E 48BF-                   mov rdi, controlwordbit0
  1843 00000490 [3C05000000000000] 
  1844 00000498 4889DE                  mov rsi, rbx
  1845 0000049B B800000000              mov qword rax, 0
  1846 000004A0 E8(00000000)            call printf
  1847                                  ;
  1848                                  ;===== Begin section that outputs the bits of the Status Word =============================================================================
  1849                                  ;
  1850 000004A5 48BF-                   mov rdi, stringformat                             ;Set up for outputting headings over individual columns of the status word
  1851 000004A7 [2F02000000000000] 
  1852 000004AF 48BE-                   mov rsi, statuswordheading                        ;Provide the text for each heading over each column
  1853 000004B1 [6B05000000000000] 
  1854 000004B9 B800000000              mov qword rax, 0                                  ;rax must be zero unless the output includes fp numbers
  1855 000004BE E8(00000000)            call printf
  1856                                  ;
  1857 000004C3 41BF00000000            mov qword r15, 0
  1858 000004C9 66448B7C2404            mov word r15w, [rsp+4]                            ;r15 is the backup copy of the status word; r15w is the lowest 16 bits of r15
  1859 000004CF 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the status word
  1860 000004D2 4881E300800000          and rbx, bmask                                    ;Zero out all bits of status word except bit #15
  1861 000004D9 48C1EB0F                shr rbx, 15                                       ;Shift bit number 15 to position #0
  1862 000004DD 48BF-                   mov rdi, statuswordbit15
  1863 000004DF [BB07000000000000] 
  1864 000004E7 4889DE                  mov rsi, rbx
  1865 000004EA B800000000              mov qword rax, 0
  1866 000004EF E8(00000000)            call printf
  1867                                  ;
  1868 000004F4 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1869 000004F7 4881E300400000          and rbx, c3mask                                   ;Zero out all bits of status word except bit #14
  1870 000004FE 48C1EB0E                shr rbx, 14                                       ;Shift bit number 14 to position #0
  1871 00000502 48BF-                   mov rdi, statuswordbit14
  1872 00000504 [9207000000000000] 
  1873 0000050C 4889DE                  mov rsi, rbx
  1874 0000050F B800000000              mov qword rax, 0
  1875 00000514 E8(00000000)            call printf
  1876                                  ;
  1877 00000519 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1878 0000051C 4881E300380000          and rbx, tpmask                                   ;Zero out all bits of status word except bits #13, 12, and 11
  1879 00000523 48C1EB0B                shr rbx, 11                                       ;Shift bits 13, 12 and 11 to positions 2, 1, and 0
  1880 00000527 48BF-                   mov rdi, statuswordbit11_13
  1881 00000529 [6D07000000000000] 
  1882 00000531 4889DE                  mov rsi, rbx
  1883 00000534 B800000000              mov qword rax, 0
  1884 00000539 E8(00000000)            call printf
  1885                                  ;
  1886 0000053E 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1887 00000541 4881E300040000          and rbx, c2mask                                   ;Zero out all bits of status word except bit #10
  1888 00000548 48C1EB0A                shr rbx, 10                                       ;Shift bit number 10 to position #0
  1889 0000054C 48BF-                   mov rdi, statuswordbit10
  1890 0000054E [4407000000000000] 
  1891 00000556 4889DE                  mov rsi, rbx
  1892 00000559 B800000000              mov qword rax, 0
  1893 0000055E E8(00000000)            call printf
  1894                                  ;
  1895 00000563 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1896 00000566 4881E300020000          and rbx, c1mask                                   ;Zero out all bits of status word except bit #9
  1897 0000056D 48C1EB09                shr rbx, 9                                        ;Shift bit number 9 to position #0
  1898 00000571 48BF-                   mov rdi, statuswordbit9
  1899 00000573 [1B07000000000000] 
  1900 0000057B 4889DE                  mov rsi, rbx
  1901 0000057E B800000000              mov qword rax, 0
  1902 00000583 E8(00000000)            call printf
  1903                                  ;
  1904 00000588 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1905 0000058B 4881E300010000          and rbx, c0mask                                   ;Zero out all bits of status word except bit #8
  1906 00000592 48C1EB08                shr rbx, 8                                        ;Shift bit number 8 to position #0
  1907 00000596 48BF-                   mov rdi, statuswordbit8
  1908 00000598 [F206000000000000] 
  1909 000005A0 4889DE                  mov rsi, rbx
  1910 000005A3 B800000000              mov qword rax, 0
  1911 000005A8 E8(00000000)            call printf
  1912                                  ;
  1913 000005AD 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1914 000005B0 4881E380000000          and rbx, esmask                                   ;Zero out all bits of status word except bit #7
  1915 000005B7 48C1EB07                shr rbx, 7                                        ;Shift bit number 7 to position #0
  1916 000005BB 48BF-                   mov rdi, statuswordbit7
  1917 000005BD [C506000000000000] 
  1918 000005C5 4889DE                  mov rsi, rbx
  1919 000005C8 B800000000              mov qword rax, 0
  1920 000005CD E8(00000000)            call printf
  1921                                  ;
  1922 000005D2 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1923 000005D5 4883E340                and rbx, sfmask                                   ;Zero out all bits of status word except bit #6
  1924 000005D9 48C1EB06                shr rbx, 6                                        ;Shift bit number 6 to position #0
  1925 000005DD 48BF-                   mov rdi, statuswordbit6
  1926 000005DF [A106000000000000] 
  1927 000005E7 4889DE                  mov rsi, rbx
  1928 000005EA B800000000              mov qword rax, 0
  1929 000005EF E8(00000000)            call printf
  1930                                  ;
  1931 000005F4 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1932 000005F7 4883E320                and rbx, pemask                                   ;Zero out all bits of status word except bit #5
  1933 000005FB 48C1EB05                shr rbx, 5                                        ;Shift bit number 5 to position #0
  1934 000005FF 48BF-                   mov rdi, statuswordbit5
  1935 00000601 [7F06000000000000] 
  1936 00000609 4889DE                  mov rsi, rbx
  1937 0000060C B800000000              mov qword rax, 0
  1938 00000611 E8(00000000)            call printf
  1939                                  ;
  1940 00000616 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1941 00000619 4883E310                and rbx, uemask                                   ;Zero out all bits of status word except bit #4
  1942 0000061D 48C1EB04                shr rbx, 4                                        ;Shift bit number 4 to position #0
  1943 00000621 48BF-                   mov rdi, statuswordbit4
  1944 00000623 [5D06000000000000] 
  1945 0000062B 4889DE                  mov rsi, rbx
  1946 0000062E B800000000              mov qword rax, 0
  1947 00000633 E8(00000000)            call printf
  1948                                  ;
  1949 00000638 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1950 0000063B 4883E308                and rbx, oemask                                   ;Zero out all bits of status word except bit #3
  1951 0000063F 48C1EB03                shr rbx, 3                                        ;Shift bit number 3 to position #0
  1952 00000643 48BF-                   mov rdi, statuswordbit3
  1953 00000645 [3C06000000000000] 
  1954 0000064D 4889DE                  mov rsi, rbx
  1955 00000650 B800000000              mov qword rax, 0
  1956 00000655 E8(00000000)            call printf
  1957                                  ;
  1958 0000065A 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1959 0000065D 4883E304                and rbx, zemask                                   ;Zero out all bits of the status word except bit #2
  1960 00000661 48C1EB02                shr rbx, 2                                        ;Shift bit number 2 to position #0
  1961 00000665 48BF-                   mov rdi, statuswordbit2
  1962 00000667 [1806000000000000] 
  1963 0000066F 4889DE                  mov rsi, rbx
  1964 00000672 B800000000              mov qword rax, 0
  1965 00000677 E8(00000000)            call printf
  1966                                  ;
  1967 0000067C 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1968 0000067F 4883E302                and rbx, demask                                   ;Zero out all bits of the status word except bit #1
  1969 00000683 48D1EB                  shr rbx, 1                                        ;Shift bit number 1 to position #0
  1970 00000686 48BF-                   mov rdi, statuswordbit1
  1971 00000688 [E905000000000000] 
  1972 00000690 4889DE                  mov rsi, rbx
  1973 00000693 B800000000              mov qword rax, 0
  1974 00000698 E8(00000000)            call printf
  1975                                  ;
  1976 0000069D 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1977 000006A0 4883E301                and rbx, iemask                                   ;Zero out all bits of the status word except bit #0
  1978                                  ;No shifting of bits is necessary
  1979 000006A4 48BF-                   mov rdi, statuswordbit0
  1980 000006A6 [BF05000000000000] 
  1981 000006AE 4889DE                  mov rsi, rbx
  1982 000006B1 B800000000              mov qword rax, 0
  1983 000006B6 E8(00000000)            call printf
  1984                                  ;
  1985                                  ;===== Begin section that outputs the contents of the Tag Word ============================================================================
  1986                                  ;
  1987 000006BB 48BF-                   mov rdi, stringformat                             ;Set up for outputting headings over individual columns of the status word
  1988 000006BD [2F02000000000000] 
  1989 000006C5 48BE-                   mov rsi, tagwordheading                           ;Provide the text for each heading over each column
  1990 000006C7 [DC07000000000000] 
  1991 000006CF B800000000              mov qword rax, 0                                  ;rax must be zero unless the output includes fp numbers
  1992 000006D4 E8(00000000)            call printf
  1993                                  ;
  1994 000006D9 41BF00000000            mov qword r15, 0
  1995 000006DF 66448B7C2408            mov word r15w, [rsp+8]                            ;r15 is the backup copy of the tag word; r15w is the lowest 16 bits of r15
  1996 000006E5 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the tag word
  1997 000006E8 4881E300C00000          and rbx, tag7mask                                 ;Zero out all bits except bits #15 and 14
  1998 000006EF 48C1EB0E                shr rbx, 14                                       ;Shift bit number 14 to position #0
  1999 000006F3 48BF-                   mov rdi, tag7bits15_14
  2000 000006F5 [AD08000000000000] 
  2001 000006FD 4889DE                  mov rsi, rbx
  2002 00000700 B800000000              mov qword rax, 0
  2003 00000705 E8(00000000)            call printf
  2004                                  ;
  2005 0000070A 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the tag word
  2006 0000070D 4881E300300000          and rbx, tag6mask                                 ;Zero out all bits except bits #13 and 12
  2007 00000714 48C1EB0C                shr rbx, 12                                       ;Shift bit number 12 to position #0
  2008 00000718 48BF-                   mov rdi, tag6bits13_12                            ;Place address of format into first standard parameter
  2009 0000071A [C308000000000000] 
  2010 00000722 4889DE                  mov rsi, rbx                                      ;Place tag6 into the second standard parameter
  2011 00000725 B800000000              mov qword rax, 0                                  ;Indicate that no fp numbers will be passed to the function printf
  2012 0000072A E8(00000000)            call printf                                       ;Make print do the work
  2013                                  ;
  2014 0000072F 4C89FB                  mov rbx, r15
  2015 00000732 4881E3000C0000          and rbx, tag5mask
  2016 00000739 48C1EB0A                shr rbx, 10
  2017 0000073D 48BF-                   mov rdi, tag5bits11_10
  2018 0000073F [D908000000000000] 
  2019 00000747 4889DE                  mov rsi, rbx
  2020 0000074A B800000000              mov qword rax, 0
  2021 0000074F E8(00000000)            call printf
  2022                                  ;
  2023 00000754 4C89FB                  mov rbx, r15
  2024 00000757 4881E300030000          and rbx, tag4mask
  2025 0000075E 48C1EB08                shr rbx, 8
  2026 00000762 48BF-                   mov rdi, tag4bits9_8
  2027 00000764 [EF08000000000000] 
  2028 0000076C 4889DE                  mov rsi, rbx
  2029 0000076F B800000000              mov qword rax, 0
  2030 00000774 E8(00000000)            call printf
  2031                                  ;
  2032 00000779 4C89FB                  mov rbx, r15
  2033 0000077C 4881E3C0000000          and rbx, tag3mask
  2034 00000783 48C1EB06                shr rbx, 6
  2035 00000787 48BF-                   mov rdi, tag3bits7_6
  2036 00000789 [0509000000000000] 
  2037 00000791 4889DE                  mov rsi, rbx
  2038 00000794 B800000000              mov qword rax, 0
  2039 00000799 E8(00000000)            call printf
  2040                                  ;
  2041 0000079E 4C89FB                  mov rbx, r15
  2042 000007A1 4883E330                and rbx, tag2mask
  2043 000007A5 48C1EB04                shr rbx, 4
  2044 000007A9 48BF-                   mov rdi, tag2bits5_4
  2045 000007AB [1B09000000000000] 
  2046 000007B3 4889DE                  mov rsi, rbx
  2047 000007B6 B800000000              mov qword rax, 0
  2048 000007BB E8(00000000)            call printf
  2049                                  ;
  2050 000007C0 4C89FB                  mov rbx, r15
  2051 000007C3 4883E30C                and rbx, tag1mask
  2052 000007C7 48C1EB02                shr rbx, 2
  2053 000007CB 48BF-                   mov rdi, tag1bits3_2
  2054 000007CD [3109000000000000] 
  2055 000007D5 4889DE                  mov rsi, rbx
  2056 000007D8 B800000000              mov qword rax, 0
  2057 000007DD E8(00000000)            call printf
  2058                                  ;
  2059 000007E2 4C89FB                  mov rbx, r15
  2060 000007E5 4883E303                and rbx, tag0mask
  2061                                  ;No shifting of bits is necessary
  2062 000007E9 48BF-                   mov rdi, tag0bits1_0
  2063 000007EB [4709000000000000] 
  2064 000007F3 4889DE                  mov rsi, rbx
  2065 000007F6 B800000000              mov qword rax, 0
  2066 000007FB E8(00000000)            call printf
  2067                                  ;
  2068                                  ;===== Begin setup of tag word for use in displaying type of contents of each fpu register ===============================================
  2069                                  ;
  2070                                  ;Initial configuration of tag word
  2071                                  ;   -----------------------------------------
  2072                                  ;   |tag7|tag6|tag5|tag4|tag3|tag2|tag1|tag0|
  2073                                  ;   -----------------------------------------
  2074                                  ;and each tag component is 2 bits.
  2075                                  ;The contents of TOP (within the Status word) indicates which tag associates with st0.  For instance, suppose TOP contain 5, then tag5 
  2076                                  ;identifies with register st0 as in the following diagram:
  2077                                  ;   -----------------------------------------
  2078                                  ;   |tag7|tag6|tag5|tag4|tag3|tag2|tag1|tag0|
  2079                                  ;   -----------------------------------------
  2080                                  ;     st2  st1  st0  st7  st6  st5  st4  st3
  2081                                  ;
  2082                                  ;The next step will be to rotate the Tag word to the right in order to align the tags with registers in the order st7 st6 st5 st4 st3 st2 
  2083                                  ;st1 st0.  Then the diagram will be as follows:
  2084                                  ;   -----------------------------------------
  2085                                  ;   |tag7|tag6|tag5|tag4|tag3|tag2|tag1|tag0|
  2086                                  ;   -----------------------------------------
  2087                                  ;     st7  st6  st5  st4  st3  st2  st1  st0
  2088                                  ;Then tag number k is associated with fpu register k.
  2089                                  ;
  2090                                  ;First obtain a copy of the top pointer.
  2091 00000800 41BF00000000            mov qword r15, 0                                  ;Make sure r15 contains only zeros before placing the status word in r15.
  2092 00000806 66448B7C2404            mov word r15w, [rsp+4]                            ;Now the status word is in the lowest word of the 4-word register r15
  2093 0000080C 4981E700380000          and r15, tpmask                                   ;Zero out all bits of status word except bits #13, 12, and 11
  2094 00000813 49C1EF0B                shr r15, 11                                       ;Shift bits 13, 12 and 11 to positions 2, 1, and 0.  
  2095                                  ;                                                 ;Now r15 contains only the top pointer.
  2096                                  ;
  2097                                  ;Obtain a copy of the Tag word.
  2098 00000817 41BE00000000            mov qword r14, 0
  2099 0000081D 66448B742408            mov word r14w, [rsp+8]                            ;The tag word is now in the lowest 2 bytes of r14.
  2100 00000823 4981E6FFFF0000          and r14, 000000000000ffffh                        ;Make sure the upper 6 bytes are all zeros.
  2101                                  ;
  2102                                  ;Now rotate the Tag word by 2*Top many bits.  The syntax requires that we use a loop rotating by 2 bits with each iteration of the loop.
  2103                                  beginrotateloop:                                  ;Assembly version of a while loop; test stop condition before loop iterates.
  2104 0000082A 4983FF00                     cmp qword r15, 0                             ;Compare: is r15 == 0?
  2105 0000082E 740D                         je  exitrotateloop                           ;If r15 is 0 then the loop has finished.
  2106 00000830 6641D1CE                     ror r14w, 1                                  ;Rotate right 1 bit
  2107 00000834 6641D1CE                     ror r14w, 1                                  ;Rotate right 1 more bit.  Do it twice because tag cells hold two bits.
  2108 00000838 49FFCF                       dec r15                                      ;r15 = r15 - 1
  2109 0000083B EBED                    jmp beginrotateloop
  2110                                  exitrotateloop:
  2111                                  ;
  2112                                  ;
  2113                                  ;
  2114                                  ;===== Begin section that outputs the contents of each FPU register =======================================================================
  2115                                  
  2116                                  ;Display headings over each column.  Column 1 = identifier of register; Column 2 = contents of register; Column 3 = tag value
  2117 0000083D 48BF-                   mov qword rdi, stringformat                       ;First parameter receives the standard string format 
  2118 0000083F [2F02000000000000] 
  2119 00000847 48BE-                   mov qword rsi, columnheadings                     ;Second parameter receives the string to be printed
  2120 00000849 [3202000000000000] 
  2121 00000851 B800000000              mov qword rax, 0                                  ;No fp values will be outputted
  2122 00000856 E8(00000000)            call printf
  2123                                  
  2124                                  ;Begin section to output st7
  2125 0000085B 48BF-                   mov qword rdi, st7format                          ;Set the format for st7
  2126 0000085D [5602000000000000] 
  2127 00000865 488B74246A              mov qword rsi, [rsp+106]                          ;Copy the first 2 bytes of the number to the 2nd parameter
  2128 0000086A 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2129 00000871 488B542462              mov qword rdx, [rsp+98]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2130                                  ;The tag cell for st7 is in bits 15 and 14 of the tag word r14.  We need that number to classify the data in st7.
  2131 00000876 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2132 00000879 4881E300C00000          and rbx, tag7mask                                 ;Make sure all bits other than bits 14 and 15 are zeros
  2133 00000880 48C1EB0E                shr rbx, 14                                       ;Shift the bit in position 14 to position 0
  2134                                  ;
  2135                                  ;A case statement will be used to evaluate the contents of rbx.
  2136                                  st7_case0:
  2137 00000884 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2138 00000888 750C                        jne st7_case1                                 ;Jump to case 1 if this is not case 0.
  2139 0000088A 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2140 0000088C [3203000000000000] 
  2141 00000894 EB2E                        jmp st7_endcase                               ;Exit from the entire case statement
  2142                                  st7_case1:
  2143 00000896 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2144 0000089A 750C                        jne st7_case2                                 ;Jump to case 2 if this is not case 1.
  2145 0000089C 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2146 0000089E [3F03000000000000] 
  2147 000008A6 EB1C                        jmp st7_endcase                               ;Exit from the entire case statement
  2148                                  st7_case2:
  2149 000008A8 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2150 000008AC 750C                        jne st7_case3                                 ;Jump to case 3 if this is not case 2.
  2151 000008AE 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2152 000008B0 [4B03000000000000] 
  2153 000008B8 EB0A                        jmp st7_endcase                               ;Exit from the entire case statement
  2154                                  st7_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2155 000008BA 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2156 000008BC [1E03000000000000] 
  2157                                  st7_endcase:                                      ;End of the case statement
  2158                                  ;
  2159 000008C4 B800000000              mov qword rax, 0                              
  2160 000008C9 E8(00000000)            call printf
  2161                                  ;End of section to output st7
  2162                                  ;
  2163                                  ;
  2164                                  ;Begin section to output st6
  2165 000008CE 48BF-                   mov qword rdi, st6format                          ;Set the format for st6
  2166 000008D0 [6F02000000000000] 
  2167 000008D8 488B742460              mov qword rsi, [rsp+96]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2168 000008DD 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2169 000008E4 488B542458              mov qword rdx, [rsp+88]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2170                                  ;The tag cell for st6 is in bits 13 and 12 of the tag word r14.  We need that number to classify the data in st6.
  2171 000008E9 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2172 000008EC 4881E300300000          and rbx, tag6mask                                 ;Make sure all bits other than bits 13 and 12 are zeros
  2173 000008F3 48C1EB0C                shr rbx, 12                                       ;Shift the bit in position 12 to position 0
  2174                                  ;
  2175                                  ;A case statement will be used to evaluate the contents of rbx.
  2176                                  st6_case0:
  2177 000008F7 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2178 000008FB 750C                        jne st6_case1                                 ;Jump to case 1 if this is not case 0.
  2179 000008FD 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2180 000008FF [3203000000000000] 
  2181 00000907 EB2E                        jmp st6_endcase                               ;Exit from the entire case statement
  2182                                  st6_case1:
  2183 00000909 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2184 0000090D 750C                        jne st6_case2                                 ;Jump to case 2 if this is not case 1.
  2185 0000090F 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2186 00000911 [3F03000000000000] 
  2187 00000919 EB1C                        jmp st6_endcase                               ;Exit from the entire case statement
  2188                                  st6_case2:
  2189 0000091B 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2190 0000091F 750C                        jne st6_case3                                 ;Jump to case 3 if this is not case 2.
  2191 00000921 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2192 00000923 [4B03000000000000] 
  2193 0000092B EB0A                        jmp st6_endcase                               ;Exit from the entire case statement
  2194                                  st6_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2195 0000092D 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2196 0000092F [1E03000000000000] 
  2197                                  st6_endcase:                                      ;End of the case statement
  2198                                  ;
  2199 00000937 B800000000              mov qword rax, 0                              
  2200 0000093C E8(00000000)            call printf
  2201                                  ;End of section to output st6
  2202                                  ;
  2203                                  ;
  2204                                  ;Begin section to output st5
  2205 00000941 48BF-                   mov qword rdi, st5format                          ;Set the format for st5
  2206 00000943 [8802000000000000] 
  2207 0000094B 488B742456              mov qword rsi, [rsp+86]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2208 00000950 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2209 00000957 488B54244E              mov qword rdx, [rsp+78]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2210                                  ;The tag cell for st5 is in bits 11 and 10 of the tag word r14.  We need that number to classify the data in st5.
  2211 0000095C 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2212 0000095F 4881E3000C0000          and rbx, tag5mask                                 ;Make sure all bits other than bits 11 and 10 are zeros
  2213 00000966 48C1EB0A                shr rbx, 10                                       ;Shift the bit in position 10 to position 0
  2214                                  ;
  2215                                  ;A case statement will be used to evaluate the contents of rbx.
  2216                                  st5_case0:
  2217 0000096A 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2218 0000096E 750C                        jne st5_case1                                 ;Jump to case 1 if this is not case 0.
  2219 00000970 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2220 00000972 [3203000000000000] 
  2221 0000097A EB2E                        jmp st5_endcase                               ;Exit from the entire case statement
  2222                                  st5_case1:
  2223 0000097C 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2224 00000980 750C                        jne st5_case2                                 ;Jump to case 2 if this is not case 1.
  2225 00000982 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2226 00000984 [3F03000000000000] 
  2227 0000098C EB1C                        jmp st5_endcase                               ;Exit from the entire case statement
  2228                                  st5_case2:
  2229 0000098E 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2230 00000992 750C                        jne st5_case3                                 ;Jump to case 3 if this is not case 2.
  2231 00000994 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2232 00000996 [4B03000000000000] 
  2233 0000099E EB0A                        jmp st5_endcase                               ;Exit from the entire case statement
  2234                                  st5_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2235 000009A0 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2236 000009A2 [1E03000000000000] 
  2237                                  st5_endcase:                                      ;End of the case statement
  2238                                  ;
  2239 000009AA B800000000              mov qword rax, 0                              
  2240 000009AF E8(00000000)            call printf
  2241                                  ;End of section to output st5
  2242                                  ;
  2243                                  ;
  2244                                  ;Begin section to output st4
  2245 000009B4 48BF-                   mov qword rdi, st4format                          ;Set the format for st4
  2246 000009B6 [A102000000000000] 
  2247 000009BE 488B74244C              mov qword rsi, [rsp+76]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2248 000009C3 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2249 000009CA 488B542444              mov qword rdx, [rsp+68]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2250                                  ;The tag cell for st4 is in bits 9 and 8 of the tag word r14.  We need that number to classify the data in st4.
  2251 000009CF 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2252 000009D2 4881E300030000          and rbx, tag4mask                                 ;Make sure all bits other than bits 9 and 8 are zeros
  2253 000009D9 48C1EB08                shr rbx, 8                                       ;Shift the bit in position 8 to position 0
  2254                                  ;
  2255                                  ;A case statement will be used to evaluate the contents of rbx.
  2256                                  st4_case0:
  2257 000009DD 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2258 000009E1 750C                        jne st4_case1                                 ;Jump to case 1 if this is not case 0.
  2259 000009E3 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2260 000009E5 [3203000000000000] 
  2261 000009ED EB2E                        jmp st4_endcase                               ;Exit from the entire case statement
  2262                                  st4_case1:
  2263 000009EF 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2264 000009F3 750C                        jne st4_case2                                 ;Jump to case 2 if this is not case 1.
  2265 000009F5 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2266 000009F7 [3F03000000000000] 
  2267 000009FF EB1C                        jmp st4_endcase                               ;Exit from the entire case statement
  2268                                  st4_case2:
  2269 00000A01 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2270 00000A05 750C                        jne st4_case3                                 ;Jump to case 3 if this is not case 2.
  2271 00000A07 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2272 00000A09 [4B03000000000000] 
  2273 00000A11 EB0A                        jmp st4_endcase                               ;Exit from the entire case statement
  2274                                  st4_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2275 00000A13 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2276 00000A15 [1E03000000000000] 
  2277                                  st4_endcase:                                      ;End of the case statement
  2278                                  ;
  2279 00000A1D B800000000              mov qword rax, 0                              
  2280 00000A22 E8(00000000)            call printf
  2281                                  ;End of section to output st4
  2282                                  ;
  2283                                  ;
  2284                                  ;Begin section to output st3
  2285 00000A27 48BF-                   mov qword rdi, st3format                          ;Set the format for st3
  2286 00000A29 [BA02000000000000] 
  2287 00000A31 488B742442              mov qword rsi, [rsp+66]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2288 00000A36 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2289 00000A3D 488B54243A              mov qword rdx, [rsp+58]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2290                                  ;The tag cell for st3 is in bits 7 and 6 of the tag word r14.  We need that number to classify the data in st3.
  2291 00000A42 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2292 00000A45 4881E3C0000000          and rbx, tag3mask                                 ;Make sure all bits other than bits 9 and 8 are zeros
  2293 00000A4C 48C1EB06                shr rbx, 6                                       ;Shift the bit in position 6 to position 0
  2294                                  ;
  2295                                  ;A case statement will be used to evaluate the contents of rbx.
  2296                                  st3_case0:
  2297 00000A50 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2298 00000A54 750C                        jne st3_case1                                 ;Jump to case 1 if this is not case 0.
  2299 00000A56 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2300 00000A58 [3203000000000000] 
  2301 00000A60 EB2E                        jmp st3_endcase                               ;Exit from the entire case statement
  2302                                  st3_case1:
  2303 00000A62 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2304 00000A66 750C                        jne st3_case2                                 ;Jump to case 2 if this is not case 1.
  2305 00000A68 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2306 00000A6A [3F03000000000000] 
  2307 00000A72 EB1C                        jmp st3_endcase                               ;Exit from the entire case statement
  2308                                  st3_case2:
  2309 00000A74 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2310 00000A78 750C                        jne st3_case3                                 ;Jump to case 3 if this is not case 2.
  2311 00000A7A 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2312 00000A7C [4B03000000000000] 
  2313 00000A84 EB0A                        jmp st3_endcase                               ;Exit from the entire case statement
  2314                                  st3_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2315 00000A86 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2316 00000A88 [1E03000000000000] 
  2317                                  st3_endcase:                                      ;End of the case statement
  2318                                  ;
  2319 00000A90 B800000000              mov qword rax, 0                              
  2320 00000A95 E8(00000000)            call printf
  2321                                  ;End of section to output st3
  2322                                  ;
  2323                                  ;
  2324                                  ;Begin section to output st2
  2325 00000A9A 48BF-                   mov qword rdi, st2format                          ;Set the format for st2
  2326 00000A9C [D302000000000000] 
  2327 00000AA4 488B742438              mov qword rsi, [rsp+56]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2328 00000AA9 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2329 00000AB0 488B542430              mov qword rdx, [rsp+48]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2330                                  ;The tag cell for st2 is in bits 5 and 4 of the tag word r14.  We need that number to classify the data in st2.
  2331 00000AB5 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2332 00000AB8 4883E330                and rbx, tag2mask                                 ;Make sure all bits other than bits 5 and 4 are zeros
  2333 00000ABC 48C1EB04                shr rbx, 4                                        ;Shift the bit in position 4 to position 0
  2334                                  ;
  2335                                  ;A case statement will be used to evaluate the contents of rbx.
  2336                                  st2_case0:
  2337 00000AC0 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2338 00000AC4 750C                        jne st2_case1                                 ;Jump to case 1 if this is not case 0.
  2339 00000AC6 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2340 00000AC8 [3203000000000000] 
  2341 00000AD0 EB2E                        jmp st2_endcase                               ;Exit from the entire case statement
  2342                                  st2_case1:
  2343 00000AD2 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2344 00000AD6 750C                        jne st2_case2                                 ;Jump to case 2 if this is not case 1.
  2345 00000AD8 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2346 00000ADA [3F03000000000000] 
  2347 00000AE2 EB1C                        jmp st2_endcase                               ;Exit from the entire case statement
  2348                                  st2_case2:
  2349 00000AE4 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2350 00000AE8 750C                        jne st2_case3                                 ;Jump to case 3 if this is not case 2.
  2351 00000AEA 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2352 00000AEC [4B03000000000000] 
  2353 00000AF4 EB0A                        jmp st2_endcase                               ;Exit from the entire case statement
  2354                                  st2_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2355 00000AF6 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2356 00000AF8 [1E03000000000000] 
  2357                                  st2_endcase:                                      ;End of the case statement
  2358                                  ;
  2359 00000B00 B800000000              mov qword rax, 0                              
  2360 00000B05 E8(00000000)            call printf
  2361                                  ;End of section to output st2
  2362                                  ;
  2363                                  ;
  2364                                  ;Begin section to output st1
  2365 00000B0A 48BF-                   mov qword rdi, st1format                          ;Set the format for st1
  2366 00000B0C [EC02000000000000] 
  2367 00000B14 488B74242E              mov qword rsi, [rsp+46]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2368 00000B19 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2369 00000B20 488B542426              mov qword rdx, [rsp+38]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2370                                  ;The tag cell for st1 is in bits 3 and 2 of the tag word r14.  We need that number to classify the data in st1.
  2371 00000B25 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2372 00000B28 4883E30C                and rbx, tag1mask                                 ;Make sure all bits other than bits 3 and 2 are zeros
  2373 00000B2C 48C1EB02                shr rbx, 2                                        ;Shift the bit in position 2 to position 0
  2374                                  ;
  2375                                  ;A case statement will be used to evaluate the contents of rbx.
  2376                                  st1_case0:
  2377 00000B30 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2378 00000B34 750C                        jne st1_case1                                 ;Jump to case 1 if this is not case 0.
  2379 00000B36 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2380 00000B38 [3203000000000000] 
  2381 00000B40 EB2E                        jmp st1_endcase                               ;Exit from the entire case statement
  2382                                  st1_case1:
  2383 00000B42 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2384 00000B46 750C                        jne st1_case2                                 ;Jump to case 2 if this is not case 1.
  2385 00000B48 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2386 00000B4A [3F03000000000000] 
  2387 00000B52 EB1C                        jmp st1_endcase                               ;Exit from the entire case statement
  2388                                  st1_case2:
  2389 00000B54 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2390 00000B58 750C                        jne st1_case3                                 ;Jump to case 3 if this is not case 2.
  2391 00000B5A 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2392 00000B5C [4B03000000000000] 
  2393 00000B64 EB0A                        jmp st1_endcase                               ;Exit from the entire case statement
  2394                                  st1_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2395 00000B66 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2396 00000B68 [1E03000000000000] 
  2397                                  st1_endcase:                                      ;End of the case statement
  2398                                  ;
  2399 00000B70 B800000000              mov qword rax, 0                                  ;No fp values will be passed to parameters
  2400 00000B75 E8(00000000)            call printf
  2401                                  ;End of section to output st1
  2402                                  ;
  2403                                  ;
  2404                                  ;Begin section to output st0
  2405 00000B7A 48BF-                   mov qword rdi, st0format                          ;Set the format for st0
  2406 00000B7C [0503000000000000] 
  2407 00000B84 488B742424              mov qword rsi, [rsp+36]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2408 00000B89 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2409 00000B90 488B54241C              mov qword rdx, [rsp+28]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2410                                  
  2411                                  ;The tag cell for st0 is in bits 1 and 0 of the tag word r14.  We need that number to classify the data in st7.
  2412 00000B95 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2413 00000B98 4883E303                and rbx, tag0mask                                 ;Make sure all bits other than bits 1 and 0 are zeros
  2414                                  ;
  2415                                  ;A case statement will be used to evaluate the contents of rbx.
  2416                                  st0_case0:
  2417 00000B9C 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2418 00000BA0 750C                        jne st0_case1                                 ;Jump to case 1 if this is not case 0.
  2419 00000BA2 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2420 00000BA4 [3203000000000000] 
  2421 00000BAC EB2E                        jmp st0_endcase                               ;Exit from the entire case statement
  2422                                  st0_case1:
  2423 00000BAE 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2424 00000BB2 750C                        jne st0_case2                                 ;Jump to case 2 if this is not case 1.
  2425 00000BB4 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2426 00000BB6 [3F03000000000000] 
  2427 00000BBE EB1C                        jmp st0_endcase                               ;Exit from the entire case statement
  2428                                  st0_case2:
  2429 00000BC0 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2430 00000BC4 750C                        jne st0_case3                                 ;Jump to case 2 if this is not case 1.
  2431 00000BC6 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2432 00000BC8 [4B03000000000000] 
  2433 00000BD0 EB0A                        jmp st0_endcase                               ;Exit from the entire case statement
  2434                                  st0_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2435 00000BD2 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2436 00000BD4 [1E03000000000000] 
  2437                                  st0_endcase:                                      ;End of the case statement
  2438                                  ;
  2439 00000BDC B800000000              mov qword rax, 0                                  ;No fp values will be passed to parameters.
  2440 00000BE1 E8(00000000)            call printf
  2441                                  ;End of section to output st0
  2442                                  
  2443                                  ;===============================
  2444                                  ;End of showing FPU registers  |
  2445                                  ;===============================
  2446                                  ;
  2447                                  ;===== Final message ====================================================================================================================== 
  2448                                  ;
  2449 00000BE6 48BF-                   mov qword rdi, stringformat                                 ;"%s"
  2450 00000BE8 [2F02000000000000] 
  2451 00000BF0 48BE-                   mov qword rsi, farewell                                     ;"End of FPU87 stack dump"
  2452 00000BF2 [5D09000000000000] 
  2453 00000BFA B800000000              mov qword rax, 0                                            ;Do not use any data from SSE
  2454 00000BFF E8(00000000)            call printf                                                 ;Standard library function handles the output
  2455                                  ;
  2456                                  ;Dr Carter's program restores all the data in the FPU from memory.  Therefore, we do it here also. 
  2457                                  ;Think of the frstor instruction as the reverse of the fsave instruction; it restores all the fpu registers from the system stack.  
  2458                                  ;Scan the source code above belonging to the function showfpusubprogram and notice that between the fsave instruction and the frstor 
  2459                                  ;instruction below the system stack is never modified.  Therefore, it should be safe to apply the frstor instruction.
  2460                                  ;
  2461 00000C04 DD2424                  frstor [rsp]   ;Hopefully rsp has not changed since the fsave instruction was executed earlier.
  2462                                  ;
  2463                                  ;===== Time to clean up and return to the caller ==========================================================================================
  2464                                  ;This program is preparing to terminate.  It is time to reverse those earlier pushes.
  2465                                  
  2466                                  ;First do 14 pops and discard any data.  Undoubtedly Dr Carter has a more sophisticated way to accomplish the same result.
  2467 00000C07 58                      pop rax  ;pop #1
  2468 00000C08 58                      pop rax  ;pop #2
  2469 00000C09 58                      pop rax  ;pop #3
  2470 00000C0A 58                      pop rax  ;pop #4
  2471 00000C0B 58                      pop rax  ;pop #5
  2472 00000C0C 58                      pop rax  ;pop #6
  2473 00000C0D 58                      pop rax  ;pop #7
  2474 00000C0E 58                      pop rax  ;pop #8
  2475 00000C0F 58                      pop rax  ;pop #9
  2476 00000C10 58                      pop rax  ;pop #10
  2477 00000C11 58                      pop rax  ;pop #11
  2478 00000C12 58                      pop rax  ;pop #12
  2479 00000C13 58                      pop rax  ;pop #13
  2480 00000C14 58                      pop rax  ;pop #14
  2481                                  ;
  2482                                  ;Restore orginal values to the integer registers
  2483 00000C15 9D                      popf                                                        ;Restore rflags
  2484 00000C16 5B                      pop rbx                                                     ;Restore rbx
  2485 00000C17 415F                    pop r15                                                     ;Restore r15
  2486 00000C19 415E                    pop r14                                                     ;Restore r14
  2487 00000C1B 415D                    pop r13                                                     ;Restore r13
  2488 00000C1D 415C                    pop r12                                                     ;Restore r12
  2489 00000C1F 415B                    pop r11                                                     ;Restore r11
  2490 00000C21 415A                    pop r10                                                     ;Restore r10
  2491 00000C23 4159                    pop r9                                                      ;Restore r9
  2492 00000C25 4158                    pop r8                                                      ;Restore r8
  2493 00000C27 59                      pop rcx                                                     ;Restore rcx
  2494 00000C28 5A                      pop rdx                                                     ;Restore rdx
  2495 00000C29 5E                      pop rsi                                                     ;Restore rsi
  2496 00000C2A 5F                      pop rdi                                                     ;Restore rdi
  2497 00000C2B 5D                      pop rbp                                                     ;Restore rbp
  2498                                  ;
  2499                                  ;
  2500                                  ;===== Return an integer value 0 to the caller ====================================================================================================
  2501                                  ;
  2502 00000C2C B800000000              mov qword rax, 0                                            ;Return value 0 indicates successful conclusion.
  2503 00000C31 C20800                  ret 8                                                       ;Return to the address on top of the stack and then discard one qword from the top of the stack.
  2504                                  ;End of showfpusubprogram 
  2505                                  ;========== End of showfpusubprogram ==============================================================================================================
  2506                                  ;
  2507                                  ;
  2508                                  ;==================================================================================================================================================
  2509                                  ;==================================================================================================================================================
  2510                                  ;                             Show XMM Registers Subprogram
  2511                                  ;==================================================================================================================================================
  2512                                  ;==================================================================================================================================================
  2513                                  
  2514                                  global showxmmsubprogram
  2515                                  
  2516                                  segment .data
  2517                                  
  2518 00000976 257300                  formatstring db "%s", 0
  2519 00000979 535345322044756D70-     formatdumpnumber db "SSE2 Dump # %ld", 10, 0
  2520 00000982 202320256C640A00   
  2521 0000098A 786D6D232320202020-     formatsseheader db "xmm##        high64              low64", 10, 0
  2522 00000993 202020206869676836-
  2523 0000099C 342020202020202020-
  2524 000009A5 2020202020206C6F77-
  2525 000009AE 36340A00           
  2526 000009B2 786D6D31353A202025-     formatxmm15 db     "xmm15:  %016lx    %016lx", 10, 0
  2527 000009BB 3031366C7820202020-
  2528 000009C4 253031366C780A00   
  2529 000009CC 786D6D31343A202025-     formatxmm14 db     "xmm14:  %016lx    %016lx", 10, 0
  2530 000009D5 3031366C7820202020-
  2531 000009DE 253031366C780A00   
  2532 000009E6 786D6D31333A202025-     formatxmm13 db     "xmm13:  %016lx    %016lx", 10, 0
  2533 000009EF 3031366C7820202020-
  2534 000009F8 253031366C780A00   
  2535 00000A00 786D6D31323A202025-     formatxmm12 db     "xmm12:  %016lx    %016lx", 10, 0
  2536 00000A09 3031366C7820202020-
  2537 00000A12 253031366C780A00   
  2538 00000A1A 786D6D31313A202025-     formatxmm11 db     "xmm11:  %016lx    %016lx", 10, 0
  2539 00000A23 3031366C7820202020-
  2540 00000A2C 253031366C780A00   
  2541 00000A34 786D6D31303A202025-     formatxmm10 db     "xmm10:  %016lx    %016lx", 10, 0
  2542 00000A3D 3031366C7820202020-
  2543 00000A46 253031366C780A00   
  2544 00000A4E 786D6D393A20202025-     formatxmm9  db     "xmm9:   %016lx    %016lx", 10, 0
  2545 00000A57 3031366C7820202020-
  2546 00000A60 253031366C780A00   
  2547 00000A68 786D6D383A20202025-     formatxmm8  db     "xmm8:   %016lx    %016lx", 10, 0
  2548 00000A71 3031366C7820202020-
  2549 00000A7A 253031366C780A00   
  2550 00000A82 786D6D373A20202025-     formatxmm7  db     "xmm7:   %016lx    %016lx", 10, 0
  2551 00000A8B 3031366C7820202020-
  2552 00000A94 253031366C780A00   
  2553 00000A9C 786D6D363A20202025-     formatxmm6  db     "xmm6:   %016lx    %016lx", 10, 0
  2554 00000AA5 3031366C7820202020-
  2555 00000AAE 253031366C780A00   
  2556 00000AB6 786D6D353A20202025-     formatxmm5  db     "xmm5:   %016lx    %016lx", 10, 0
  2557 00000ABF 3031366C7820202020-
  2558 00000AC8 253031366C780A00   
  2559 00000AD0 786D6D343A20202025-     formatxmm4  db     "xmm4:   %016lx    %016lx", 10, 0
  2560 00000AD9 3031366C7820202020-
  2561 00000AE2 253031366C780A00   
  2562 00000AEA 786D6D333A20202025-     formatxmm3  db     "xmm3:   %016lx    %016lx", 10, 0
  2563 00000AF3 3031366C7820202020-
  2564 00000AFC 253031366C780A00   
  2565 00000B04 786D6D323A20202025-     formatxmm2  db     "xmm2:   %016lx    %016lx", 10, 0
  2566 00000B0D 3031366C7820202020-
  2567 00000B16 253031366C780A00   
  2568 00000B1E 786D6D313A20202025-     formatxmm1  db     "xmm1:   %016lx    %016lx", 10, 0
  2569 00000B27 3031366C7820202020-
  2570 00000B30 253031366C780A00   
  2571 00000B38 786D6D303A20202025-     formatxmm0  db     "xmm0:   %016lx    %016lx", 10, 0
  2572 00000B41 3031366C7820202020-
  2573 00000B4A 253031366C780A00   
  2574                                  
  2575                                  segment .text
  2576                                  showxmmsubprogram:
  2577                                  
  2578                                  ;========== Create backups for integer registers ========================================================================================
  2579                                  ;Safe programming practice: save all the data that may possibly be modified within this subprogram.  Intentionally the registers rsp
  2580                                  ;and rax are not backed up.
  2581 00000C34 55                      push rbp                                                    ;Back up the very important base pointer register
  2582 00000C35 57                      push rdi                                                    ;Back up rdi
  2583 00000C36 56                      push rsi                                                    ;Back up rsi
  2584 00000C37 52                      push rdx                                                    ;Back up rdx
  2585 00000C38 51                      push rcx                                                    ;Back up rcx
  2586 00000C39 4150                    push r8                                                     ;Back up r8
  2587 00000C3B 4151                    push r9                                                     ;Back up r9
  2588 00000C3D 4152                    push r10                                                    ;Back up r10
  2589 00000C3F 4153                    push r11                                                    ;Back up r11
  2590 00000C41 4154                    push r12                                                    ;Back up r12
  2591 00000C43 4155                    push r13                                                    ;Back up r13
  2592 00000C45 4156                    push r14                                                    ;Back up r14
  2593 00000C47 4157                    push r15                                                    ;Back up r15
  2594 00000C49 53                      push rbx                                                    ;Back up rbx
  2595 00000C4A 9C                      pushf                                                       ;Back up rflags
  2596                                  
  2597                                  ;========== Copy all xmm values to the integer stack ====================================================================================
  2598 00000C4B 90<rept>                align 16
  2599 00000C50 6A00                    push qword 0
  2600 00000C52 6A00                    push qword 0
  2601 00000C54 66440F113C24            movupd     [rsp], xmm15
  2602 00000C5A 6A00                    push qword 0
  2603 00000C5C 6A00                    push qword 0
  2604 00000C5E 66440F113424            movupd     [rsp], xmm14
  2605 00000C64 6A00                    push qword 0
  2606 00000C66 6A00                    push qword 0
  2607 00000C68 66440F112C24            movupd     [rsp], xmm13
  2608 00000C6E 6A00                    push qword 0
  2609 00000C70 6A00                    push qword 0
  2610 00000C72 66440F112424            movupd     [rsp], xmm12
  2611 00000C78 6A00                    push qword 0
  2612 00000C7A 6A00                    push qword 0
  2613 00000C7C 66440F111C24            movupd     [rsp], xmm11
  2614 00000C82 6A00                    push qword 0
  2615 00000C84 6A00                    push qword 0
  2616 00000C86 66440F111424            movupd     [rsp], xmm10
  2617 00000C8C 6A00                    push qword 0
  2618 00000C8E 6A00                    push qword 0
  2619 00000C90 66440F110C24            movupd     [rsp], xmm9
  2620 00000C96 6A00                    push qword 0
  2621 00000C98 6A00                    push qword 0
  2622 00000C9A 66440F110424            movupd     [rsp], xmm8
  2623 00000CA0 6A00                    push qword 0
  2624 00000CA2 6A00                    push qword 0
  2625 00000CA4 660F113C24              movupd     [rsp], xmm7
  2626 00000CA9 6A00                    push qword 0
  2627 00000CAB 6A00                    push qword 0
  2628 00000CAD 660F113424              movupd     [rsp], xmm6
  2629 00000CB2 6A00                    push qword 0
  2630 00000CB4 6A00                    push qword 0
  2631 00000CB6 660F112C24              movupd     [rsp], xmm5
  2632 00000CBB 6A00                    push qword 0
  2633 00000CBD 6A00                    push qword 0
  2634 00000CBF 660F112424              movupd     [rsp], xmm4
  2635 00000CC4 6A00                    push qword 0
  2636 00000CC6 6A00                    push qword 0
  2637 00000CC8 660F111C24              movupd     [rsp], xmm3
  2638 00000CCD 6A00                    push qword 0
  2639 00000CCF 6A00                    push qword 0
  2640 00000CD1 660F111424              movupd     [rsp], xmm2
  2641 00000CD6 6A00                    push qword 0
  2642 00000CD8 6A00                    push qword 0
  2643 00000CDA 660F110C24              movupd     [rsp], xmm1
  2644 00000CDF 6A00                    push qword 0
  2645 00000CE1 6A00                    push qword 0
  2646 00000CE3 660F110424              movupd     [rsp], xmm0
  2647                                  ;========= End of copying xmm values to the integer stack =================================================================================
  2648                                  
  2649                                  ;========= Begin section that will display all the xmm values =============================================================================
  2650 00000CE8 90<rept>                align 16
  2651 00000CF0 B800000000              mov qword  rax, 0
  2652 00000CF5 48BF-                   mov        rdi, formatdumpnumber
  2653 00000CF7 [7909000000000000] 
  2654 00000CFF 488BB42480010000        mov        rsi, [rsp+48*8]
  2655 00000D07 E8(00000000)            call       printf
  2656 00000D0C B800000000              mov qword  rax, 0
  2657 00000D11 48BF-                   mov        rdi, formatstring                                ;"%s", 0
  2658 00000D13 [7609000000000000] 
  2659 00000D1B 48BE-                   mov        rsi, formatsseheader                             ;"xmm**    high64    low64"
  2660 00000D1D [8A09000000000000] 
  2661 00000D25 E8(00000000)            call       printf
  2662 00000D2A B800000000              mov qword  rax, 0
  2663 00000D2F 48BF-                   mov        rdi, formatxmm15
  2664 00000D31 [B209000000000000] 
  2665 00000D39 488BB424F8000000        mov        rsi, [rsp+31*8]
  2666 00000D41 488B9424F0000000        mov        rdx, [rsp+30*8]
  2667 00000D49 E8(00000000)            call       printf
  2668 00000D4E B800000000              mov qword  rax, 0
  2669 00000D53 48BF-                   mov        rdi, formatxmm14
  2670 00000D55 [CC09000000000000] 
  2671 00000D5D 488BB424E8000000        mov        rsi, [rsp+29*8]
  2672 00000D65 488B9424E0000000        mov        rdx, [rsp+28*8]
  2673 00000D6D E8(00000000)            call       printf
  2674 00000D72 B800000000              mov qword  rax, 0
  2675 00000D77 48BF-                   mov        rdi, formatxmm13
  2676 00000D79 [E609000000000000] 
  2677 00000D81 488BB424D8000000        mov        rsi, [rsp+27*8]
  2678 00000D89 488B9424D0000000        mov        rdx, [rsp+26*8]
  2679 00000D91 E8(00000000)            call       printf
  2680 00000D96 B800000000              mov qword  rax, 0
  2681 00000D9B 48BF-                   mov        rdi, formatxmm12
  2682 00000D9D [000A000000000000] 
  2683 00000DA5 488BB424C8000000        mov        rsi, [rsp+25*8]
  2684 00000DAD 488B9424C0000000        mov        rdx, [rsp+24*8]
  2685 00000DB5 E8(00000000)            call       printf
  2686 00000DBA B800000000              mov qword  rax, 0
  2687 00000DBF 48BF-                   mov        rdi, formatxmm11
  2688 00000DC1 [1A0A000000000000] 
  2689 00000DC9 488BB424B8000000        mov        rsi, [rsp+23*8]
  2690 00000DD1 488B9424B0000000        mov        rdx, [rsp+22*8]
  2691 00000DD9 E8(00000000)            call       printf
  2692 00000DDE B800000000              mov qword  rax, 0
  2693 00000DE3 48BF-                   mov        rdi, formatxmm10
  2694 00000DE5 [340A000000000000] 
  2695 00000DED 488BB424A8000000        mov        rsi, [rsp+21*8]
  2696 00000DF5 488B9424A0000000        mov        rdx, [rsp+20*8]
  2697 00000DFD E8(00000000)            call       printf
  2698 00000E02 B800000000              mov qword  rax, 0
  2699 00000E07 48BF-                   mov        rdi, formatxmm9
  2700 00000E09 [4E0A000000000000] 
  2701 00000E11 488BB42498000000        mov        rsi, [rsp+19*8]
  2702 00000E19 488B942490000000        mov        rdx, [rsp+18*8]
  2703 00000E21 E8(00000000)            call       printf
  2704 00000E26 B800000000              mov qword  rax, 0
  2705 00000E2B 48BF-                   mov        rdi, formatxmm8
  2706 00000E2D [680A000000000000] 
  2707 00000E35 488BB42488000000        mov        rsi, [rsp+17*8]
  2708 00000E3D 488B942480000000        mov        rdx, [rsp+16*8]
  2709 00000E45 E8(00000000)            call       printf
  2710 00000E4A B800000000              mov qword  rax, 0
  2711 00000E4F 48BF-                   mov        rdi, formatxmm7
  2712 00000E51 [820A000000000000] 
  2713 00000E59 488B742478              mov        rsi, [rsp+15*8]
  2714 00000E5E 488B542470              mov        rdx, [rsp+14*8]
  2715 00000E63 E8(00000000)            call       printf
  2716 00000E68 B800000000              mov qword  rax, 0
  2717 00000E6D 48BF-                   mov        rdi, formatxmm6
  2718 00000E6F [9C0A000000000000] 
  2719 00000E77 488B742468              mov        rsi, [rsp+13*8]
  2720 00000E7C 488B542460              mov        rdx, [rsp+12*8]
  2721 00000E81 E8(00000000)            call       printf
  2722 00000E86 B800000000              mov qword  rax, 0
  2723 00000E8B 48BF-                   mov        rdi, formatxmm5
  2724 00000E8D [B60A000000000000] 
  2725 00000E95 488B742458              mov        rsi, [rsp+11*8]
  2726 00000E9A 488B542450              mov        rdx, [rsp+10*8]
  2727 00000E9F E8(00000000)            call       printf
  2728 00000EA4 B800000000              mov qword  rax, 0
  2729 00000EA9 48BF-                   mov        rdi, formatxmm4
  2730 00000EAB [D00A000000000000] 
  2731 00000EB3 488B742448              mov        rsi, [rsp+9*8]
  2732 00000EB8 488B542440              mov        rdx, [rsp+8*8]
  2733 00000EBD E8(00000000)            call       printf
  2734 00000EC2 B800000000              mov qword  rax, 0
  2735 00000EC7 48BF-                   mov        rdi, formatxmm3
  2736 00000EC9 [EA0A000000000000] 
  2737 00000ED1 488B742438              mov        rsi, [rsp+7*8]
  2738 00000ED6 488B542430              mov        rdx, [rsp+6*8]
  2739 00000EDB E8(00000000)            call       printf
  2740 00000EE0 B800000000              mov qword  rax, 0
  2741 00000EE5 48BF-                   mov        rdi, formatxmm2
  2742 00000EE7 [040B000000000000] 
  2743 00000EEF 488B742428              mov        rsi, [rsp+5*8]
  2744 00000EF4 488B542420              mov        rdx, [rsp+4*8]
  2745 00000EF9 E8(00000000)            call       printf
  2746 00000EFE B800000000              mov qword  rax, 0
  2747 00000F03 48BF-                   mov        rdi, formatxmm1
  2748 00000F05 [1E0B000000000000] 
  2749 00000F0D 488B742418              mov        rsi, [rsp+3*8]
  2750 00000F12 488B542410              mov        rdx, [rsp+2*8]
  2751 00000F17 E8(00000000)            call       printf
  2752 00000F1C B800000000              mov qword  rax, 0
  2753 00000F21 48BF-                   mov        rdi, formatxmm0
  2754 00000F23 [380B000000000000] 
  2755 00000F2B 488B742408              mov        rsi, [rsp+1*8]
  2756 00000F30 488B1424                mov        rdx, [rsp+0*8]
  2757 00000F34 E8(00000000)            call       printf
  2758                                  
  2759                                  ;========== Restore all the data to the SEE2 registers ===================================================================================
  2760                                  
  2761 00000F39 66440F10BC24F00000-     movupd     xmm15, [rsp+30*8]
  2762 00000F42 00                 
  2763 00000F43 66440F10B424E00000-     movupd     xmm14, [rsp+28*8]
  2764 00000F4C 00                 
  2765 00000F4D 66440F10AC24D00000-     movupd     xmm13, [rsp+26*8]
  2766 00000F56 00                 
  2767 00000F57 66440F10A424C00000-     movupd     xmm12, [rsp+24*8]
  2768 00000F60 00                 
  2769 00000F61 66440F109C24B00000-     movupd     xmm11, [rsp+22*8]
  2770 00000F6A 00                 
  2771 00000F6B 66440F109424A00000-     movupd     xmm10, [rsp+20*8]
  2772 00000F74 00                 
  2773 00000F75 66440F108C24900000-     movupd     xmm9,  [rsp+18*8]
  2774 00000F7E 00                 
  2775 00000F7F 66440F108424800000-     movupd     xmm8,  [rsp+16*8]
  2776 00000F88 00                 
  2777 00000F89 660F107C2470            movupd     xmm7,  [rsp+14*8]
  2778 00000F8F 660F10742460            movupd     xmm6,  [rsp+12*8]
  2779 00000F95 660F106C2450            movupd     xmm5,  [rsp+10*8]
  2780 00000F9B 660F10642440            movupd     xmm4,  [rsp+8*8]
  2781 00000FA1 660F105C2430            movupd     xmm3,  [rsp+6*8]
  2782 00000FA7 660F10542420            movupd     xmm2,  [rsp+4*8]
  2783 00000FAD 660F104C2410            movupd     xmm1,  [rsp+2*8]
  2784 00000FB3 660F100424              movupd     xmm0,  [rsp+0*8]
  2785                                  
  2786                                  ;========= Reverse the pushes that occurred in this subprogram ============================================================================
  2787 00000FB8 58                      pop rax                                                     ;#32
  2788 00000FB9 58                      pop rax                                                     ;#31
  2789 00000FBA 58                      pop rax                                                     ;#30
  2790 00000FBB 58                      pop rax                                                     ;#29
  2791 00000FBC 58                      pop rax                                                     ;#28
  2792 00000FBD 58                      pop rax                                                     ;#27
  2793 00000FBE 58                      pop rax                                                     ;#26
  2794 00000FBF 58                      pop rax                                                     ;#25
  2795 00000FC0 58                      pop rax                                                     ;#24
  2796 00000FC1 58                      pop rax                                                     ;#23
  2797 00000FC2 58                      pop rax                                                     ;#22
  2798 00000FC3 58                      pop rax                                                     ;#21
  2799 00000FC4 58                      pop rax                                                     ;#20
  2800 00000FC5 58                      pop rax                                                     ;#19
  2801 00000FC6 58                      pop rax                                                     ;#18
  2802 00000FC7 58                      pop rax                                                     ;#17
  2803 00000FC8 58                      pop rax                                                     ;#16
  2804 00000FC9 58                      pop rax                                                     ;#15
  2805 00000FCA 58                      pop rax                                                     ;#14
  2806 00000FCB 58                      pop rax                                                     ;#13
  2807 00000FCC 58                      pop rax                                                     ;#12
  2808 00000FCD 58                      pop rax                                                     ;#11
  2809 00000FCE 58                      pop rax                                                     ;#10
  2810 00000FCF 58                      pop rax                                                     ;#9
  2811 00000FD0 58                      pop rax                                                     ;#8
  2812 00000FD1 58                      pop rax                                                     ;#7
  2813 00000FD2 58                      pop rax                                                     ;#6
  2814 00000FD3 58                      pop rax                                                     ;#5
  2815 00000FD4 58                      pop rax                                                     ;#4
  2816 00000FD5 58                      pop rax                                                     ;#3
  2817 00000FD6 58                      pop rax                                                     ;#2
  2818 00000FD7 58                      pop rax                                                     ;#1
  2819                                  
  2820                                  ;=========== Restore the original values to the integer registers =========================================================================
  2821 00000FD8 9D                      popf                                                        ;Restore rflags
  2822 00000FD9 5B                      pop rbx                                                     ;Restore rbx
  2823 00000FDA 415F                    pop r15                                                     ;Restore r15
  2824 00000FDC 415E                    pop r14                                                     ;Restore r14
  2825 00000FDE 415D                    pop r13                                                     ;Restore r13
  2826 00000FE0 415C                    pop r12                                                     ;Restore r12
  2827 00000FE2 415B                    pop r11                                                     ;Restore r11
  2828 00000FE4 415A                    pop r10                                                     ;Restore r10
  2829 00000FE6 4159                    pop r9                                                      ;Restore r9
  2830 00000FE8 4158                    pop r8                                                      ;Restore r8
  2831 00000FEA 59                      pop rcx                                                     ;Restore rcx
  2832 00000FEB 5A                      pop rdx                                                     ;Restore rdx
  2833 00000FEC 5E                      pop rsi                                                     ;Restore rsi
  2834 00000FED 5F                      pop rdi                                                     ;Restore rdi
  2835 00000FEE 5D                      pop rbp                                                     ;Restore rbp
  2836                                  
  2837                                  ;========== Gently exit from this subprogram ==============================================================================================================================
  2838                                  
  2839 00000FEF B800000000              mov qword rax, 0                                            ;Return value 0 indicates successful conclusion.
  2840 00000FF4 C20800                  ret 8                                                       ;Return to the address on top of the stack and then discard one qword from the 
  2841                                  ;                                                           ;top of the stack.  The latter action is due to the '8' following the 'ret'.
  2842                                  
  2843                                  ;========== End of showxmmsubprogram ======================================================================================================================================
  2844                                  
  2845                                  
  2846                                  
  2847                                  
  2848                                  
  2849                                  ;===========================================================================================================================================================================
  2850                                  ;===========================================================================================================================================================================
  2851                                  ;                             Show YMM Registers Subprogram
  2852                                  ;===========================================================================================================================================================================
  2853                                  ;===========================================================================================================================================================================
  2854                                  ;
  2855                                  ;Author: Floyd Holliday
  2856                                  ;Author email: holliday@fullerton.edu or activeprofessor@yahoo.com
  2857                                  ;Subprogram name: showymmsubprogram
  2858                                  ;Language: X86
  2859                                  ;Syntax: Intel
  2860                                  ;Date begun: 2013-Nov-15
  2861                                  ;Dates modified: 2014-Jan-22, 2014-Mar-4, 2014-Jul-7
  2862                                  ;Purpose: Show the contents of all 16 ymm registers in the AVX and SSE components.
  2863                                  ;Strategy: First backup all of AVX and SSE using xsave
  2864                                  ;          Second copy all ymm data to the stack
  2865                                  ;          Third display on the standard output device the ymm data from the stack
  2866                                  ;          Fourth restore the original data to AVX and SSE using xrstor
  2867                                  ;Terminology: AVX is Advanced Vector Extensions (state component 2).  SSE is Streaming SIMD Extensions (state component 1).  SIMD is Single Instruction - Multiple Data.
  2868                                  ;The registers ymm span both AVX and SSE: the upper half of each ymm register is in AVX and the lower half is in SSE.
  2869                                  ;Format information:
  2870                                  ;   Page width: 172 columns
  2871                                  ;   Comments begin: column 61
  2872                                  ;   Optimal printing: Landscape, 7 point font, monospace, 8Â½x11 paper
  2873                                  
  2874                                  global showymmsubprogram
  2875                                  
  2876                                  extern printf
  2877                                  
  2878                                  segment .data
  2879                                  
  2880 00000B52 4156582044756D7020-     showymmsubprogram.aveheaderfirst db "AVX Dump # %ld", 10, 0
  2881 00000B5B 2320256C640A00     
  2882 00000B62 202020202020207C2D-     showymmsubprogram.aveheadersecond db "       |-----------------------------ymm registers---------------------------------|", 10, 0
  2883 00000B6B 2D2D2D2D2D2D2D2D2D-
  2884 00000B74 2D2D2D2D2D2D2D2D2D-
  2885 00000B7D 2D2D2D2D2D2D2D2D2D-
  2886 00000B86 2D796D6D2072656769-
  2887 00000B8F 73746572732D2D2D2D-
  2888 00000B98 2D2D2D2D2D2D2D2D2D-
  2889 00000BA1 2D2D2D2D2D2D2D2D2D-
  2890 00000BAA 2D2D2D2D2D2D2D2D2D-
  2891 00000BB3 2D2D7C0A00         
  2892 00000BB8 202020202020207C20-     showymmsubprogram.aveheaderthird  db "       |                                                                           |", 10, 0
  2893 00000BC1 202020202020202020-
  2894 00000BCA 202020202020202020-
  2895 00000BD3 202020202020202020-
  2896 00000BDC 202020202020202020-
  2897 00000BE5 202020202020202020-
  2898 00000BEE 202020202020202020-
  2899 00000BF7 202020202020202020-
  2900 00000C00 202020202020202020-
  2901 00000C09 20207C0A00         
  2902 00000C0E 202020202020207C2D-     showymmsubprogram.aveheaderfourth db "       |---------AVX Registers--------------|-----------SSE registers------------| |", 10, 0
  2903 00000C17 2D2D2D2D2D2D2D2D41-
  2904 00000C20 565820526567697374-
  2905 00000C29 6572732D2D2D2D2D2D-
  2906 00000C32 2D2D2D2D2D2D2D2D7C-
  2907 00000C3B 2D2D2D2D2D2D2D2D2D-
  2908 00000C44 2D2D53534520726567-
  2909 00000C4D 6973746572732D2D2D-
  2910 00000C56 2D2D2D2D2D2D2D2D2D-
  2911 00000C5F 7C207C0A00         
  2912 00000C64 202020202020207C20-     showymmsubprogram.aveheaderfifth  db "       |                                    |                                    | |", 10, 0
  2913 00000C6D 202020202020202020-
  2914 00000C76 202020202020202020-
  2915 00000C7F 202020202020202020-
  2916 00000C88 20202020202020207C-
  2917 00000C91 202020202020202020-
  2918 00000C9A 202020202020202020-
  2919 00000CA3 202020202020202020-
  2920 00000CAC 202020202020202020-
  2921 00000CB5 7C207C0A00         
  2922 00000CBA 796D6D31353A207C20-     showymmsubprogram.aveymm15        db "ymm15: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2923 00000CC3 253031366C78202025-
  2924 00000CCC 3031366C78207C2025-
  2925 00000CD5 3031366C7820202530-
  2926 00000CDE 31366C78207C207C0A-
  2927 00000CE7 00                 
  2928 00000CE8 796D6D31343A207C20-     showymmsubprogram.aveymm14        db "ymm14: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2929 00000CF1 253031366C78202025-
  2930 00000CFA 3031366C78207C2025-
  2931 00000D03 3031366C7820202530-
  2932 00000D0C 31366C78207C207C0A-
  2933 00000D15 00                 
  2934 00000D16 796D6D31333A207C20-     showymmsubprogram.aveymm13        db "ymm13: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2935 00000D1F 253031366C78202025-
  2936 00000D28 3031366C78207C2025-
  2937 00000D31 3031366C7820202530-
  2938 00000D3A 31366C78207C207C0A-
  2939 00000D43 00                 
  2940 00000D44 796D6D31323A207C20-     showymmsubprogram.aveymm12        db "ymm12: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2941 00000D4D 253031366C78202025-
  2942 00000D56 3031366C78207C2025-
  2943 00000D5F 3031366C7820202530-
  2944 00000D68 31366C78207C207C0A-
  2945 00000D71 00                 
  2946 00000D72 796D6D31313A207C20-     showymmsubprogram.aveymm11        db "ymm11: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2947 00000D7B 253031366C78202025-
  2948 00000D84 3031366C78207C2025-
  2949 00000D8D 3031366C7820202530-
  2950 00000D96 31366C78207C207C0A-
  2951 00000D9F 00                 
  2952 00000DA0 796D6D31303A207C20-     showymmsubprogram.aveymm10        db "ymm10: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2953 00000DA9 253031366C78202025-
  2954 00000DB2 3031366C78207C2025-
  2955 00000DBB 3031366C7820202530-
  2956 00000DC4 31366C78207C207C0A-
  2957 00000DCD 00                 
  2958 00000DCE 796D6D393A20207C20-     showymmsubprogram.aveymm9         db "ymm9:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2959 00000DD7 253031366C78202025-
  2960 00000DE0 3031366C78207C2025-
  2961 00000DE9 3031366C7820202530-
  2962 00000DF2 31366C78207C207C0A-
  2963 00000DFB 00                 
  2964 00000DFC 796D6D383A20207C20-     showymmsubprogram.aveymm8         db "ymm8:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2965 00000E05 253031366C78202025-
  2966 00000E0E 3031366C78207C2025-
  2967 00000E17 3031366C7820202530-
  2968 00000E20 31366C78207C207C0A-
  2969 00000E29 00                 
  2970 00000E2A 796D6D373A20207C20-     showymmsubprogram.aveymm7         db "ymm7:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2971 00000E33 253031366C78202025-
  2972 00000E3C 3031366C78207C2025-
  2973 00000E45 3031366C7820202530-
  2974 00000E4E 31366C78207C207C0A-
  2975 00000E57 00                 
  2976 00000E58 796D6D363A20207C20-     showymmsubprogram.aveymm6         db "ymm6:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2977 00000E61 253031366C78202025-
  2978 00000E6A 3031366C78207C2025-
  2979 00000E73 3031366C7820202530-
  2980 00000E7C 31366C78207C207C0A-
  2981 00000E85 00                 
  2982 00000E86 796D6D353A20207C20-     showymmsubprogram.aveymm5         db "ymm5:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2983 00000E8F 253031366C78202025-
  2984 00000E98 3031366C78207C2025-
  2985 00000EA1 3031366C7820202530-
  2986 00000EAA 31366C78207C207C0A-
  2987 00000EB3 00                 
  2988 00000EB4 796D6D343A20207C20-     showymmsubprogram.aveymm4         db "ymm4:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2989 00000EBD 253031366C78202025-
  2990 00000EC6 3031366C78207C2025-
  2991 00000ECF 3031366C7820202530-
  2992 00000ED8 31366C78207C207C0A-
  2993 00000EE1 00                 
  2994 00000EE2 796D6D333A20207C20-     showymmsubprogram.aveymm3         db "ymm3:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2995 00000EEB 253031366C78202025-
  2996 00000EF4 3031366C78207C2025-
  2997 00000EFD 3031366C7820202530-
  2998 00000F06 31366C78207C207C0A-
  2999 00000F0F 00                 
  3000 00000F10 796D6D323A20207C20-     showymmsubprogram.aveymm2         db "ymm2:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3001 00000F19 253031366C78202025-
  3002 00000F22 3031366C78207C2025-
  3003 00000F2B 3031366C7820202530-
  3004 00000F34 31366C78207C207C0A-
  3005 00000F3D 00                 
  3006 00000F3E 796D6D313A20207C20-     showymmsubprogram.aveymm1         db "ymm1:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3007 00000F47 253031366C78202025-
  3008 00000F50 3031366C78207C2025-
  3009 00000F59 3031366C7820202530-
  3010 00000F62 31366C78207C207C0A-
  3011 00000F6B 00                 
  3012 00000F6C 796D6D303A20207C20-     showymmsubprogram.aveymm0         db "ymm0:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3013 00000F75 253031366C78202025-
  3014 00000F7E 3031366C78207C2025-
  3015 00000F87 3031366C7820202530-
  3016 00000F90 31366C78207C207C0A-
  3017 00000F99 00                 
  3018 00000F9A 202020202020207C2D-     showymmsubprogram.avefooter       db "       |-------------------------------------------------------------------------|-|", 10, 0
  3019 00000FA3 2D2D2D2D2D2D2D2D2D-
  3020 00000FAC 2D2D2D2D2D2D2D2D2D-
  3021 00000FB5 2D2D2D2D2D2D2D2D2D-
  3022 00000FBE 2D2D2D2D2D2D2D2D2D-
  3023 00000FC7 2D2D2D2D2D2D2D2D2D-
  3024 00000FD0 2D2D2D2D2D2D2D2D2D-
  3025 00000FD9 2D2D2D2D2D2D2D2D2D-
  3026 00000FE2 2D2D2D2D2D2D2D2D2D-
  3027 00000FEB 7C2D7C0A00         
  3028                                  
  3029 00000FF0 257300                  xsavenotsupported.stringformat db "%s", 0
  3030 00000FF3 546865207873617665-     xsavenotsupported.notsupportedmessage db "The xsave instruction is not suported in this microprocessor.", 10, 0
  3031 00000FFC 20696E737472756374-
  3032 00001005 696F6E206973206E6F-
  3033 0000100E 74207375706F727465-
  3034 00001017 6420696E2074686973-
  3035 00001020 206D6963726F70726F-
  3036 00001029 636573736F722E0A00 
  3037                                  
  3038                                  segment .bss
  3039                                  
  3040                                  align 64                                                    ;The next data below must begin on a 64-byte boundary
  3041 00000340 <res 00000340>          showymmsubprogram.backuparea resb 832                       ;Create 832 bytes of storage for the data from state components 0 though 2.
  3042                                  
  3043                                  segment .text
  3044                                  
  3045                                  showymmsubprogram:
  3046                                  
  3047                                  ;=========== Back up all the GPRs whether used in this program or not ======================================================================================================
  3048                                  
  3049 00000FF7 55                      push       rbp                                              ;Save a copy of the stack base pointer
  3050 00000FF8 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
  3051 00000FFB 53                      push       rbx                                              ;Back up rbx
  3052 00000FFC 51                      push       rcx                                              ;Back up rcx
  3053 00000FFD 52                      push       rdx                                              ;Back up rdx
  3054 00000FFE 56                      push       rsi                                              ;Back up rsi
  3055 00000FFF 57                      push       rdi                                              ;Back up rdi
  3056 00001000 4150                    push       r8                                               ;Back up r8
  3057 00001002 4151                    push       r9                                               ;Back up r9
  3058 00001004 4152                    push       r10                                              ;Back up r10
  3059 00001006 4153                    push       r11                                              ;Back up r11
  3060 00001008 4154                    push       r12                                              ;Back up r12
  3061 0000100A 4155                    push       r13                                              ;Back up r13
  3062 0000100C 4156                    push       r14                                              ;Back up r14
  3063 0000100E 4157                    push       r15                                              ;Back up r15
  3064 00001010 9C                      pushf                                                       ;Back up rflags
  3065                                  
  3066                                  
  3067                                  ;===========================================================================================================================================================================
  3068                                  ;===== Begin State Component Backup ========================================================================================================================================
  3069                                  ;===========================================================================================================================================================================
  3070                                  
  3071                                  ;=========== Before proceeding verify that this computer supports xsave and xrstor =========================================================================================
  3072                                  ;Bit #26 of rcx, written rcx[26], must be 1; otherwise xsave and xrstor are not supported by this computer.
  3073                                  ;Preconditions: rax holds 1.
  3074 00001011 B801000000              mov        rax, 1
  3075                                  
  3076                                  ;Execute the cpuid instruction
  3077 00001016 0FA2                    cpuid
  3078                                  
  3079                                  ;Postconditions: If rcx[26]==1 then xsave is supported.  If rcx[26]==0 then xsave is not supported.
  3080                                  
  3081                                  ;=========== Extract bit #26 and test it ===================================================================================================================================
  3082                                  
  3083 00001018 4881E100000004          and        rcx, 0x0000000004000000                          ;The mask 0x0000000004000000 has a 1 in position #26.  Now rcx is either all zeros or
  3084                                                                                              ;has a single 1 in position #26 and zeros everywhere else.
  3085 0000101F 4883F900                cmp        rcx, 0                                           ;Is (rcx == 0)?
  3086 00001023 742A                    je         xsavenotsupported                                ;Skip the section that backs up state component data.
  3087                                  
  3088                                  ;========== Call the function to obtain the bitmap of state components =====================================================================================================
  3089                                  
  3090                                  ;Preconditions
  3091 00001025 B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
  3092 0000102A B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
  3093                                  
  3094                                  ;Call the function
  3095 0000102F 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
  3096                                  
  3097                                  ;Postconditions (There are 2 of these):
  3098                                  
  3099                                  ;1.  edx:eax is a bit map of state components managed by xsave.  At the time this program was written (2014 June) there were exactly 3 state components.  Therefore, bits
  3100                                  ;    numbered 2, 1, and 0 are important for current cpu technology.
  3101                                  ;2.  ecx holds the number of bytes required to store all the data of enabled state components. [Post condition 2 is not used in this program.]
  3102                                  ;This program assumes that under current technology (year 2014) there are at most three state components having a maximum combined data storage requirement of 832 bytes.
  3103                                  ;Therefore, the value in ecx will be less than or equal to 832.
  3104                                  
  3105                                  ;Precaution: As an insurance against a future time when there will be more than 3 state components in a processor of the X86 family the state component bitmap is masked to
  3106                                  ;allow only 3 state components maximum.
  3107                                  
  3108 00001031 41BF07000000            mov        r15, 7                                           ;7 equals three 1 bits.
  3109 00001037 4C21F8                  and        rax, r15                                         ;Bits 63-3 become zeros.
  3110 0000103A 41BF00000000            mov        r15, 0                                           ;0 equals 64 binary zeros.
  3111 00001040 4C21FA                  and        rdx, r15                                         ;Zero out rdx.
  3112                                  
  3113                                  ;========== Save all the data of all three components except GPRs ==========================================================================================================
  3114                                  
  3115                                  ;The instruction xsave will save those state components with on bits in the bitmap.  At this point edx:eax continues to hold the state component bitmap.
  3116                                  
  3117                                  ;Precondition: edx:eax holds the state component bit map.  This condition has been met by the two pops preceding this statement.
  3118 00001043 0FAE2425[40030000]      xsave      [.backuparea]                                    ;All the data of state components managed by xsave have been written to backuparea.
  3119                                  
  3120 0000104B 6AFF                    push qword -1                                               ;Set a flag (-1 = true) to indicate that state component data were backed up.
  3121 0000104D EB20                    jmp        startapplication
  3122                                  
  3123                                  ;========== Show message xsave is not supported on this platform ===========================================================================================================
  3124                                  xsavenotsupported:
  3125                                  
  3126 0000104F B800000000              mov        rax, 0
  3127 00001054 48BF-                   mov        rdi, .stringformat
  3128 00001056 [F00F000000000000] 
  3129 0000105E 48BE-                   mov        rsi, .notsupportedmessage                        ;"The xsave instruction is not suported in this microprocessor.
  3130 00001060 [F30F000000000000] 
  3131 00001068 E8(00000000)            call       printf
  3132                                  
  3133 0000106D 6A00                    push qword 0                                                ;Set a flag (0 = false) to indicate that state component data were not backed up.
  3134                                  
  3135                                  ;===========================================================================================================================================================================
  3136                                  ;===== End of State Component Backup =======================================================================================================================================
  3137                                  ;===========================================================================================================================================================================
  3138                                  
  3139                                  ;===== State of the integer stack at this time ============================================================================================================================
  3140                                  
  3141                                  ;              |---------------------------|
  3142                                  ;     rsp+18*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
  3143                                  ;              |---------------------------|
  3144                                  ;     rsp+17*8 | arbitrary number from user|
  3145                                  ;              |---------------------------|
  3146                                  ;     rsp+16*8 | return address            |
  3147                                  ;              |---------------------------|
  3148                                  ;     rsp+15*8 | rbp                       |
  3149                                  ;              |---------------------------|
  3150                                  ;     rsp+14*8 | rbx                       |
  3151                                  ;              |---------------------------|
  3152                                  ;     rsp+13*8 | rcx                       |
  3153                                  ;              |---------------------------|
  3154                                  ;     rsp+12*8 | rdx                       |
  3155                                  ;              |---------------------------|
  3156                                  ;     rsp+11*8 | rsi                       |
  3157                                  ;              |---------------------------|
  3158                                  ;     rsp+10*8 | rdi                       |
  3159                                  ;              |---------------------------|
  3160                                  ;     rsp+9*8  | r8                        |
  3161                                  ;              |---------------------------|
  3162                                  ;     rsp+8*8  | r9                        |
  3163                                  ;              |---------------------------|
  3164                                  ;     rsp+7*8  | r10                       |
  3165                                  ;              |---------------------------|
  3166                                  ;     rsp+6*8  | r11                       |
  3167                                  ;              |---------------------------|
  3168                                  ;     rsp+5*8  | r12                       |
  3169                                  ;              |---------------------------|
  3170                                  ;     rsp+4*8  | r13                       |
  3171                                  ;              |---------------------------|
  3172                                  ;     rsp+3*8  | r14                       |
  3173                                  ;              |---------------------------|
  3174                                  ;     rsp+2*8  | r15                       |
  3175                                  ;              |---------------------------|
  3176                                  ;     rsp+1*8  | rflags                    |
  3177                                  ;              |---------------------------|
  3178                                  ;     rsp      | flag either -1 or 0       |
  3179                                  ;              |---------------------------|
  3180                                  
  3181                                  ;===========================================================================================================================================================================
  3182                                  startapplication: ;===== Begin the application here: Show contents of ymm registers ========================================================================================
  3183                                  ;===========================================================================================================================================================================
  3184                                  
  3185                                  ;========== Copy all ymm data to the system stack ==========================================================================================================================
  3186                                  
  3187 0000106F 4881EC00020000          sub        rsp, 512                                         ;Create storage with the exact size needed to store the data of all ymm registers.
  3188                                  
  3189 00001076 C57D11BC24E0010000      vmovupd    [rsp+15*32], ymm15                               ;16 tedious copy instructions
  3190 0000107F C57D11B424C0010000      vmovupd    [rsp+14*32], ymm14                               ;ditto
  3191 00001088 C57D11AC24A0010000      vmovupd    [rsp+13*32], ymm13                               ;ditto
  3192 00001091 C57D11A42480010000      vmovupd    [rsp+12*32], ymm12                               ;ditto
  3193 0000109A C57D119C2460010000      vmovupd    [rsp+11*32], ymm11                               ;ditto
  3194 000010A3 C57D11942440010000      vmovupd    [rsp+10*32], ymm10                               ;ditto
  3195 000010AC C57D118C2420010000      vmovupd    [rsp+9*32], ymm9                                 ;ditto
  3196 000010B5 C57D11842400010000      vmovupd    [rsp+8*32], ymm8                                 ;ditto
  3197 000010BE C5FD11BC24E0000000      vmovupd    [rsp+7*32], ymm7                                 ;ditto
  3198 000010C7 C5FD11B424C0000000      vmovupd    [rsp+6*32], ymm6                                 ;ditto
  3199 000010D0 C5FD11AC24A0000000      vmovupd    [rsp+5*32], ymm5                                 ;ditto
  3200 000010D9 C5FD11A42480000000      vmovupd    [rsp+4*32], ymm4                                 ;ditto
  3201 000010E2 C5FD115C2460            vmovupd    [rsp+3*32], ymm3                                 ;ditto
  3202 000010E8 C5FD11542440            vmovupd    [rsp+2*32], ymm2                                 ;ditto
  3203 000010EE C5FD114C2420            vmovupd    [rsp+1*32], ymm1                                 ;ditto
  3204 000010F4 C5FD110424              vmovupd    [rsp+0*32], ymm0                                 ;ditto
  3205                                  
  3206                                  ;========== End of copying ymm values to the integer stack =================================================================================================================
  3207                                  
  3208                                  ;===== State of the integer stack at this time ============================================================================================================================
  3209                                  
  3210                                  ;               |---------------------------|
  3211                                  ;  rsp+512+18*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
  3212                                  ;               |---------------------------|
  3213                                  ;  rsp+512+17*8 | arbitrary number from user|
  3214                                  ;               |---------------------------|
  3215                                  ;  rsp+512+16*8 | return address            |
  3216                                  ;               |---------------------------|
  3217                                  ;  rsp+512+15*8 | rbp                       |
  3218                                  ;               |---------------------------|
  3219                                  ;  rsp+512+14*8 | rbx                       |
  3220                                  ;               |---------------------------|
  3221                                  ;  rsp+512+13*8 | rcx                       |
  3222                                  ;               |---------------------------|
  3223                                  ;  rsp+512+12*8 | rdx                       |
  3224                                  ;               |---------------------------|
  3225                                  ;  rsp+512+11*8 | rsi                       |
  3226                                  ;               |---------------------------|
  3227                                  ;  rsp+512+10*8 | rdi                       |
  3228                                  ;               |---------------------------|
  3229                                  ;  rsp+512+9*8  | r8                        |
  3230                                  ;               |---------------------------|
  3231                                  ;  rsp+512+8*8  | r9                        |
  3232                                  ;               |---------------------------|
  3233                                  ;  rsp+512+7*8  | r10                       |
  3234                                  ;               |---------------------------|
  3235                                  ;  rsp+512+6*8  | r11                       |
  3236                                  ;               |---------------------------|
  3237                                  ;  rsp+512+5*8  | r12                       |
  3238                                  ;               |---------------------------|
  3239                                  ;  rsp+512+4*8  | r13                       |
  3240                                  ;               |---------------------------|
  3241                                  ;  rsp+512+3*8  | r14                       |
  3242                                  ;               |---------------------------|
  3243                                  ;  rsp+512+2*8  | r15                       |
  3244                                  ;               |---------------------------|
  3245                                  ;  rsp+512+1*8  | rflags                    |
  3246                                  ;               |---------------------------|
  3247                                  ;  rsp+512      | flag either -1 or 0       |
  3248                                  ;               |---------------------------|
  3249                                  ;               |                           |
  3250                                  ;               |                           |
  3251                                  ;               |                           |
  3252                                  ;               |      512 bytes for        |
  3253                                  ;               |      ymm registers        |
  3254                                  ;               |                           |
  3255                                  ;               |                           |
  3256                                  ;               |                           |
  3257                                  ;  rsp          |---------------------------|
  3258                                  
  3259                                  ;========== Begin section that will display all the ymm values =============================================================================================================
  3260 000010F9 90<rept>                align 16
  3261 00001100 B800000000              mov qword  rax, 0
  3262 00001105 48BF-                   mov        rdi, showymmsubprogram.aveheaderfirst
  3263 00001107 [520B000000000000] 
  3264 0000110F 488BB42488020000        mov        rsi, [rsp+512+17*8]                            ;rsp+512+17*8 is the location of the ID integer used by the programmer when calling showymmregisters
  3265 00001117 E8(00000000)            call       printf
  3266                                  
  3267 0000111C B800000000              mov qword  rax, 0
  3268 00001121 48BF-                   mov        rdi, showymmsubprogram.aveheadersecond
  3269 00001123 [620B000000000000] 
  3270 0000112B E8(00000000)            call       printf
  3271                                  
  3272 00001130 B800000000              mov qword  rax, 0
  3273 00001135 48BF-                   mov        rdi, showymmsubprogram.aveheaderthird
  3274 00001137 [B80B000000000000] 
  3275 0000113F E8(00000000)            call       printf
  3276                                  
  3277 00001144 B800000000              mov qword  rax, 0
  3278 00001149 48BF-                   mov        rdi, showymmsubprogram.aveheaderfourth
  3279 0000114B [0E0C000000000000] 
  3280 00001153 E8(00000000)            call       printf
  3281                                  
  3282 00001158 B800000000              mov qword  rax, 0
  3283 0000115D 48BF-                   mov        rdi, showymmsubprogram.aveheaderfifth
  3284 0000115F [640C000000000000] 
  3285 00001167 E8(00000000)            call       printf
  3286                                  
  3287 0000116C B800000000              mov qword  rax, 0
  3288 00001171 48BF-                   mov        rdi, showymmsubprogram.aveymm15
  3289 00001173 [BA0C000000000000] 
  3290 0000117B 488BB424F8010000        mov        rsi, [rsp+63*8]
  3291 00001183 488B9424F0010000        mov        rdx, [rsp+62*8]
  3292 0000118B 488B8C24E8010000        mov        rcx, [rsp+61*8]
  3293 00001193 4C8B8424E0010000        mov        r8,  [rsp+60*8]
  3294 0000119B E8(00000000)            call       printf
  3295                                  
  3296 000011A0 B800000000              mov qword  rax, 0
  3297 000011A5 48BF-                   mov        rdi, showymmsubprogram.aveymm14
  3298 000011A7 [E80C000000000000] 
  3299 000011AF 488BB424D8010000        mov        rsi, [rsp+59*8]
  3300 000011B7 488B9424D0010000        mov        rdx, [rsp+58*8]
  3301 000011BF 488B8C24C8010000        mov        rcx, [rsp+57*8]
  3302 000011C7 4C8B8424C0010000        mov        r8,  [rsp+56*8]
  3303 000011CF E8(00000000)            call       printf
  3304                                  
  3305 000011D4 B800000000              mov qword  rax, 0
  3306 000011D9 48BF-                   mov        rdi, showymmsubprogram.aveymm13
  3307 000011DB [160D000000000000] 
  3308 000011E3 488BB424B8010000        mov        rsi, [rsp+55*8]
  3309 000011EB 488B9424B0010000        mov        rdx, [rsp+54*8]
  3310 000011F3 488B8C24A8010000        mov        rcx, [rsp+53*8]
  3311 000011FB 4C8B8424A0010000        mov        r8,  [rsp+52*8]
  3312 00001203 E8(00000000)            call       printf
  3313                                  
  3314 00001208 B800000000              mov qword  rax, 0
  3315 0000120D 48BF-                   mov        rdi, showymmsubprogram.aveymm12
  3316 0000120F [440D000000000000] 
  3317 00001217 488BB42498010000        mov        rsi, [rsp+51*8]
  3318 0000121F 488B942490010000        mov        rdx, [rsp+50*8]
  3319 00001227 488B8C2488010000        mov        rcx, [rsp+49*8]
  3320 0000122F 4C8B842480010000        mov        r8,  [rsp+48*8]
  3321 00001237 E8(00000000)            call       printf
  3322                                  
  3323 0000123C B800000000              mov qword  rax, 0
  3324 00001241 48BF-                   mov        rdi, showymmsubprogram.aveymm11
  3325 00001243 [720D000000000000] 
  3326 0000124B 488BB42478010000        mov        rsi, [rsp+47*8]
  3327 00001253 488B942470010000        mov        rdx, [rsp+46*8]
  3328 0000125B 488B8C2468010000        mov        rcx, [rsp+45*8]
  3329 00001263 4C8B842460010000        mov        r8,  [rsp+44*8]
  3330 0000126B E8(00000000)            call       printf
  3331                                  
  3332 00001270 B800000000              mov qword  rax, 0
  3333 00001275 48BF-                   mov        rdi, showymmsubprogram.aveymm10
  3334 00001277 [A00D000000000000] 
  3335 0000127F 488BB42458010000        mov        rsi, [rsp+43*8]
  3336 00001287 488B942450010000        mov        rdx, [rsp+42*8]
  3337 0000128F 488B8C2448010000        mov        rcx, [rsp+41*8]
  3338 00001297 4C8B842440010000        mov        r8,  [rsp+40*8]
  3339 0000129F E8(00000000)            call       printf
  3340                                  
  3341 000012A4 B800000000              mov qword  rax, 0
  3342 000012A9 48BF-                   mov        rdi, showymmsubprogram.aveymm9
  3343 000012AB [CE0D000000000000] 
  3344 000012B3 488BB42438010000        mov        rsi, [rsp+39*8]
  3345 000012BB 488B942430010000        mov        rdx, [rsp+38*8]
  3346 000012C3 488B8C2428010000        mov        rcx, [rsp+37*8]
  3347 000012CB 4C8B842420010000        mov        r8,  [rsp+36*8]
  3348 000012D3 E8(00000000)            call       printf
  3349                                  
  3350 000012D8 B800000000              mov qword  rax, 0
  3351 000012DD 48BF-                   mov        rdi, showymmsubprogram.aveymm8
  3352 000012DF [FC0D000000000000] 
  3353 000012E7 488BB42418010000        mov        rsi, [rsp+35*8]
  3354 000012EF 488B942410010000        mov        rdx, [rsp+34*8]
  3355 000012F7 488B8C2408010000        mov        rcx, [rsp+33*8]
  3356 000012FF 4C8B842400010000        mov        r8,  [rsp+32*8]
  3357 00001307 E8(00000000)            call       printf
  3358                                  
  3359 0000130C B800000000              mov qword  rax, 0
  3360 00001311 48BF-                   mov        rdi, showymmsubprogram.aveymm7
  3361 00001313 [2A0E000000000000] 
  3362 0000131B 488BB424F8000000        mov        rsi, [rsp+31*8]
  3363 00001323 488B9424F0000000        mov        rdx, [rsp+30*8]
  3364 0000132B 488B8C24E8000000        mov        rcx, [rsp+29*8]
  3365 00001333 4C8B8424E0000000        mov        r8,  [rsp+28*8]
  3366 0000133B E8(00000000)            call       printf
  3367                                  
  3368 00001340 B800000000              mov qword  rax, 0
  3369 00001345 48BF-                   mov        rdi, showymmsubprogram.aveymm6
  3370 00001347 [580E000000000000] 
  3371 0000134F 488BB424D8000000        mov        rsi, [rsp+27*8]
  3372 00001357 488B9424D0000000        mov        rdx, [rsp+26*8]
  3373 0000135F 488B8C24C8000000        mov        rcx, [rsp+25*8]
  3374 00001367 4C8B8424C0000000        mov        r8,  [rsp+24*8]
  3375 0000136F E8(00000000)            call       printf
  3376                                  
  3377 00001374 B800000000              mov qword  rax, 0
  3378 00001379 48BF-                   mov        rdi, showymmsubprogram.aveymm5
  3379 0000137B [860E000000000000] 
  3380 00001383 488BB424B8000000        mov        rsi, [rsp+23*8]
  3381 0000138B 488B9424B0000000        mov        rdx, [rsp+22*8]
  3382 00001393 488B8C24A8000000        mov        rcx, [rsp+21*8]
  3383 0000139B 4C8B8424A0000000        mov        r8,  [rsp+20*8]
  3384 000013A3 E8(00000000)            call       printf
  3385                                  
  3386 000013A8 B800000000              mov qword  rax, 0
  3387 000013AD 48BF-                   mov        rdi, showymmsubprogram.aveymm4
  3388 000013AF [B40E000000000000] 
  3389 000013B7 488BB42498000000        mov        rsi, [rsp+19*8]
  3390 000013BF 488B942490000000        mov        rdx, [rsp+18*8]
  3391 000013C7 488B8C2488000000        mov        rcx, [rsp+17*8]
  3392 000013CF 4C8B842480000000        mov        r8,  [rsp+16*8]
  3393 000013D7 E8(00000000)            call       printf
  3394                                  
  3395 000013DC B800000000              mov qword  rax, 0
  3396 000013E1 48BF-                   mov        rdi, showymmsubprogram.aveymm3
  3397 000013E3 [E20E000000000000] 
  3398 000013EB 488B742478              mov        rsi, [rsp+15*8]
  3399 000013F0 488B542470              mov        rdx, [rsp+14*8]
  3400 000013F5 488B4C2468              mov        rcx, [rsp+13*8]
  3401 000013FA 4C8B442460              mov        r8,  [rsp+12*8]
  3402 000013FF E8(00000000)            call       printf
  3403                                  
  3404 00001404 B800000000              mov qword  rax, 0
  3405 00001409 48BF-                   mov        rdi, showymmsubprogram.aveymm2
  3406 0000140B [100F000000000000] 
  3407 00001413 488B742458              mov        rsi, [rsp+11*8]
  3408 00001418 488B542450              mov        rdx, [rsp+10*8]
  3409 0000141D 488B4C2448              mov        rcx, [rsp+9*8]
  3410 00001422 4C8B442440              mov        r8,  [rsp+8*8]
  3411 00001427 E8(00000000)            call       printf
  3412                                  
  3413 0000142C B800000000              mov qword  rax, 0
  3414 00001431 48BF-                   mov        rdi, showymmsubprogram.aveymm1
  3415 00001433 [3E0F000000000000] 
  3416 0000143B 488B742438              mov        rsi, [rsp+7*8]
  3417 00001440 488B542430              mov        rdx, [rsp+6*8]
  3418 00001445 488B4C2428              mov        rcx, [rsp+5*8]
  3419 0000144A 4C8B442420              mov        r8,  [rsp+4*8]
  3420 0000144F E8(00000000)            call       printf
  3421                                  
  3422 00001454 B800000000              mov qword  rax, 0
  3423 00001459 48BF-                   mov        rdi, showymmsubprogram.aveymm0
  3424 0000145B [6C0F000000000000] 
  3425 00001463 488B742418              mov        rsi, [rsp+3*8]
  3426 00001468 488B542410              mov        rdx, [rsp+2*8]
  3427 0000146D 488B4C2408              mov        rcx, [rsp+1*8]
  3428 00001472 4C8B0424                mov        r8,  [rsp+0*8]
  3429 00001476 E8(00000000)            call       printf
  3430                                  
  3431 0000147B B800000000              mov qword  rax, 0
  3432 00001480 48BF-                   mov        rdi, showymmsubprogram.avefooter
  3433 00001482 [9A0F000000000000] 
  3434 0000148A E8(00000000)            call       printf
  3435                                  
  3436                                  ;========== End section that will display all the ymm values ===============================================================================================================
  3437                                  
  3438                                  ;========== Reverse the pushes that occurred in this subprogram ============================================================================================================
  3439                                  
  3440                                  ;Earlier in this program, showymmsubprogram, the instruction "sub rsp, 832" created 832 bytes of storage.  Now it is time to free that space
  3441                                  
  3442 0000148F 4881C400020000          add rsp, 512                                                ;Free previously allocated space
  3443                                  
  3444                                  ;The stack in now in the same state it was in when execution of the application started.
  3445                                  
  3446                                  ;===========================================================================================================================================================================
  3447                                  ;===== End of the application: Show contents of AVX registers ==============================================================================================================
  3448                                  ;===========================================================================================================================================================================
  3449                                  
  3450                                  
  3451                                  ;===========================================================================================================================================================================
  3452                                  ;===== Begin State Component Restoration ==================================================================================================================================
  3453                                  ;===========================================================================================================================================================================
  3454                                  
  3455                                  ;===== Check the flag to determine if state components were really backed up ===============================================================================================
  3456                                  
  3457 00001496 5B                      pop        rbx                                              ;Obtain a copy of the flag that indicates state component backup or not.
  3458                                  
  3459 00001497 4883FB00                cmp        rbx, 0                                           ;If there was no backup of state components then jump past the restore section.
  3460 0000149B 7426                    je         leavestatecomponentrestoration                   ;There are not data to be restored
  3461                                  
  3462                                  ;Continue with restoration of state components;
  3463                                  
  3464                                  ;Precondition: edx:eax must hold the state component bitmap.  Therefore, go get a new copy of that bitmap.
  3465                                  
  3466                                  ;Preconditions for obtaining the bitmap from the cpuid instruction
  3467 0000149D B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
  3468 000014A2 B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
  3469                                  
  3470                                  ;Call the function
  3471 000014A7 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
  3472                                  
  3473                                  ;Postcondition: The bitmap in now in edx:eax
  3474                                  
  3475                                  ;Future insurance: Make sure the bitmap is limited to a maximum of 3 state components.
  3476 000014A9 41BF07000000            mov        r15, 7
  3477 000014AF 4C21F8                  and        rax, r15
  3478 000014B2 41BF00000000            mov        r15, 0
  3479 000014B8 4C21FA                  and        rdx, r15
  3480                                  
  3481 000014BB 0FAE2C25[40030000]      xrstor     [showymmsubprogram.backuparea]
  3482                                  
  3483                                  ;===========================================================================================================================================================================
  3484                                  ;===== End State Component Restoration ====================================================================================================================================
  3485                                  ;===========================================================================================================================================================================
  3486                                  
  3487                                  leavestatecomponentrestoration:
  3488                                  
  3489                                  ;=========== Now restore original values to GPRs ===========================================================================================================================
  3490                                  
  3491 000014C3 9D                      popf                                                        ;Restore rflags
  3492 000014C4 415F                    pop        r15                                              ;Restore r15
  3493 000014C6 415E                    pop        r14                                              ;Restore r14
  3494 000014C8 415D                    pop        r13                                              ;Restore r13
  3495 000014CA 415C                    pop        r12                                              ;Restore r12
  3496 000014CC 415B                    pop        r11                                              ;Restore r11
  3497 000014CE 415A                    pop        r10                                              ;Restore r10
  3498 000014D0 4159                    pop        r9                                               ;Restore r9
  3499 000014D2 4158                    pop        r8                                               ;Restore r8
  3500 000014D4 5F                      pop        rdi                                              ;Restore rdi
  3501 000014D5 5E                      pop        rsi                                              ;Restore rsi
  3502 000014D6 5A                      pop        rdx                                              ;Restore rdx
  3503 000014D7 59                      pop        rcx                                              ;Restore rcx
  3504 000014D8 5B                      pop        rbx                                              ;Restore rbx
  3505 000014D9 5D                      pop        rbp                                              ;Restore rbp
  3506                                  
  3507                                  ;========== Exit gently from this subprogram ===============================================================================================================================
  3508                                  
  3509 000014DA B800000000              mov qword  rax, 0                                           ;Return zero to caller marking a successful conclusion.
  3510 000014DF C20800                  ret        8                                                ;Go to the address on top of the stack, and then discard 8 from the stack.
  3511                                  
  3512                                  ;===========================================================================================================================================================================
  3513                                  ;========== End of showymmsubprogram =======================================================================================================================================
  3514                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
  3515                                  
  3516                                  
  3517                                  
  3518                                  
  3519                                  
  3520                                  
  3521                                  
  3522                                  
  3523                                  
  3524                                  
  3525                                  
  3526                                  
  3527                                  ;===========================================================================================================================================================================
  3528                                  ;========== Begin footnotes ================================================================================================================================================
  3529                                  ;===========================================================================================================================================================================
  3530                                  ;From Professional Assembly Language by Richard Blum, page 241.
  3531                                  ;The tag register is used to identify the values with the eight 80-bit FPU data registers.  The tag register uses 16 bits (2 bits per register) to identify
  3532                                  ;the contents of each FPU data registers.  See figure below.
  3533                                  ;
  3534                                  ;Bits:                   15&14 13&12 11&10 9&8 7&6 5&4 3&2 1&0
  3535                                  ;Physical registers:      R7    R6    R5   R4  R3  R2  R1  R0
  3536                                  ;
  3537                                  ;Each tag value corresponds to a physical FPU register.  The 2-bit value for each register can contain on of four special codes indicating the content of the
  3538                                  ;register.  At any given time, an FPU data register can contain any one of the following "tags":
  3539                                      ;code 00:  a valid extended value
  3540                                      ;code 01:  the value zero
  3541                                      ;code 10:  one of the special fp value: denormal, infinity, or nan
  3542                                      ;code 11:  empty [free space, probably a nan]
  3543                                  ;This enables programmers to perform a quick check of the tag register to determine whether valid data may be in an FPU register, instead of having to read 
  3544                                  ;and analyze the contents of the register, although in practice, because you are the one putting the values into the register stack, you should already know 
  3545                                  ;what is there.
  3546                                  ;===========================================================================================================================================================================
  3547                                  
